#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ API
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_image_upload.py <path_to_image> <auth_token>
"""

import sys
import requests
import os
from pathlib import Path

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    RESET = '\033[0m'
    BOLD = '\033[1m'

def print_success(msg):
    print(f"{Colors.GREEN}‚úÖ {msg}{Colors.RESET}")

def print_error(msg):
    print(f"{Colors.RED}‚ùå {msg}{Colors.RESET}")

def print_info(msg):
    print(f"{Colors.CYAN}‚ÑπÔ∏è  {msg}{Colors.RESET}")

def print_warning(msg):
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {msg}{Colors.RESET}")

def print_header(msg):
    print(f"\n{Colors.BOLD}{Colors.BLUE}{'='*60}{Colors.RESET}")
    print(f"{Colors.BOLD}{Colors.BLUE}{msg}{Colors.RESET}")
    print(f"{Colors.BOLD}{Colors.BLUE}{'='*60}{Colors.RESET}\n")

def format_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.2f} KB"
    else:
        return f"{size_bytes / (1024 * 1024):.2f} MB"

def test_upload_image(image_path, token, api_url="https://bublickrust.ru/api/images/upload"):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
    """
    print_header("üñºÔ∏è  –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ API")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
    if not os.path.exists(image_path):
        print_error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        return False
    
    file_path = Path(image_path)
    file_size = os.path.getsize(image_path)
    
    print_info(f"–§–∞–π–ª: {file_path.name}")
    print_info(f"–†–∞–∑–º–µ—Ä: {format_size(file_size)}")
    print_info(f"–¢–∏–ø: {file_path.suffix}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    allowed_extensions = ['.png', '.jpg', '.jpeg', '.gif', '.webp']
    if file_path.suffix.lower() not in allowed_extensions:
        print_warning(f"–§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω. –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(allowed_extensions)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    max_size = 15 * 1024 * 1024  # 15 MB
    if file_size > max_size:
        print_error(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º: {format_size(max_size)}")
        return False
    
    print_info(f"API URL: {api_url}")
    print_info(f"Token: {token[:20]}...")
    
    try:
        print("\nüöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...\n")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
        with open(image_path, 'rb') as f:
            files = {
                'image': (file_path.name, f, f'image/{file_path.suffix[1:]}')
            }
            
            headers = {
                'Authorization': f'Bearer {token}'
            }
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            print_info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞...")
            response = requests.post(
                api_url,
                files=files,
                headers=headers,
                timeout=30
            )
        
        print_info(f"üì• –°—Ç–∞—Ç—É—Å: {response.status_code} {response.reason}")
        print_info(f"üìÑ Content-Type: {response.headers.get('content-type', 'unknown')}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print_info(f"üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ ({len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤):")
        print(f"{Colors.CYAN}{response.text[:500]}{Colors.RESET}")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
        try:
            data = response.json()
        except ValueError as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print_error(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.text}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if response.status_code == 200 and data.get('success'):
            print_success("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
            print("\n" + "="*60)
            print(f"{Colors.BOLD}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:{Colors.RESET}")
            print("="*60)
            print(f"  {Colors.BOLD}ID:{Colors.RESET} {data.get('id')}")
            print(f"  {Colors.BOLD}Short Code:{Colors.RESET} {data.get('shortCode')}")
            print(f"  {Colors.BOLD}–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞:{Colors.RESET}")
            print(f"    {Colors.GREEN}{data.get('directUrl')}{Colors.RESET}")
            print("="*60 + "\n")
            return True
        else:
            error_msg = data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            print_error(f"–û—à–∏–±–∫–∞ API: {error_msg}")
            return False
            
    except requests.exceptions.Timeout:
        print_error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (timeout)")
        return False
    except requests.exceptions.ConnectionError as e:
        print_error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False
    except requests.exceptions.RequestException as e:
        print_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    except Exception as e:
        print_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    print_header("üß™ Image Upload API Tester")
    
    if len(sys.argv) < 3:
        print_error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!")
        print(f"\n{Colors.BOLD}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:{Colors.RESET}")
        print(f"  python {sys.argv[0]} <–ø—É—Ç—å_–∫_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é> <auth_token>\n")
        print(f"{Colors.BOLD}–ü—Ä–∏–º–µ—Ä:{Colors.RESET}")
        print(f"  python {sys.argv[0]} photo.jpg 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'\n")
        sys.exit(1)
    
    image_path = sys.argv[1]
    token = sys.argv[2]
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - URL API
    api_url = sys.argv[3] if len(sys.argv) > 3 else "https://bublickrust.ru/api/images/upload"
    
    success = test_upload_image(image_path, token, api_url)
    
    if success:
        print_success("–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ! üéâ")
        sys.exit(0)
    else:
        print_error("–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω ‚ùå")
        sys.exit(1)

if __name__ == "__main__":
    main()

