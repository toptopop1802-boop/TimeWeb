// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const bcrypt = require('bcryptjs');
const crypto = require('crypto');

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏
function generateToken() {
    return crypto.randomBytes(32).toString('hex');
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function requireAuth(req, res, next, supabase) {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        
        console.log('üîê [Auth] Checking token:', token ? token.substring(0, 20) + '...' : 'NO TOKEN');
        
        if (!token) {
            console.log('   ‚ùå No token provided');
            return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
        }

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ API —Ç–æ–∫–µ–Ω (–¥–ª—è Figma –ø–ª–∞–≥–∏–Ω–∞ –∏ –≤–Ω–µ—à–Ω–∏—Ö API)
        const { data: apiToken, error: apiError } = await supabase
            .from('api_tokens')
            .select('*, users(*)')
            .eq('token', token)
            .eq('is_active', true)
            .maybeSingle();

        if (apiToken) {
            console.log('   ‚úÖ Valid API token for user:', apiToken.users.username);
            req.user = apiToken.users;
            req.tokenType = 'api';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º last_used_at
            await supabase
                .from('api_tokens')
                .update({ last_used_at: new Date().toISOString() })
                .eq('id', apiToken.id);
            
            return next();
        }

        // –ï—Å–ª–∏ –Ω–µ API —Ç–æ–∫–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Å–µ—Å—Å–∏—é
        const { data: session, error: sessionError } = await supabase
            .from('sessions')
            .select('*, users(*)')
            .eq('token', token)
            .gt('expires_at', new Date().toISOString())
            .maybeSingle();

        if (session) {
            console.log('   ‚úÖ Valid session for user:', session.users.username);
            req.user = session.users;
            req.session = session;
            req.tokenType = 'session';
            return next();
        }

        console.log('   ‚ùå Invalid token - not found in api_tokens or sessions');
        return res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è' });
    } catch (error) {
        console.error('‚ùå Auth middleware error:', error);
        return res.status(401).json({ error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
    }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞
function requireAdmin(req, res, next) {
    if (!req.user || req.user.role !== 'admin') {
        return res.status(403).json({ error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }
    next();
}

// –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
async function hashPassword(password) {
    return await bcrypt.hash(password, 10);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
async function verifyPassword(password, hash) {
    return await bcrypt.compare(password, hash);
}

module.exports = {
    requireAuth,
    requireAdmin,
    generateToken,
    hashPassword,
    verifyPassword
};

