import asyncio
import datetime
import logging
import os
import re
import socket
import struct
from typing import Any, Callable, Iterable, Optional
import json

import discord
from discord import app_commands
from discord.ext import commands, tasks
from aiohttp import web

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ñ–∞–π–ª .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
try:
    from database import get_database, Database
    DATABASE_ENABLED = True
except Exception as db_exc:
    logging.warning(f"Database module not loaded: {db_exc}. Analytics and auto-delete features will be disabled.")
    DATABASE_ENABLED = False
    Database = None
    get_database = None

# Required environment variables:
#   DISCORD_TOKEN       - bot token from https://discord.com/developers/applications
# Optional environment variables:
#   DISCORD_GUILD_ID    - lock commands to a specific guild (defaults to all)
#   DISCORD_PREFIX      - override the default command prefix ("!")


def chunk_members(members: Iterable[discord.Member], size: int) -> Iterable[list[discord.Member]]:
    """Yield members in fixed-size batches to reduce rate-limit pressure."""
    batch: list[discord.Member] = []
    for member in members:
        batch.append(member)
        if len(batch) == size:
            yield batch
            batch = []
    if batch:
        yield batch


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞
_bot_instance: Optional[commands.Bot] = None


async def handle_gradient_role_request(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—É—é —Ä–æ–ª—å"""
    global _bot_instance
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    auth_header = request.headers.get('Authorization', '')
    if not auth_header.startswith('Bearer '):
        return web.json_response({'error': 'Missing authorization'}, status=401)
    
    token = auth_header[7:]  # –£–±–∏—Ä–∞–µ–º 'Bearer '
    if token != request.app['api_secret']:
        return web.json_response({'error': 'Invalid token'}, status=403)
    
    try:
        data = await request.json()
        role_name = data.get('roleName', '').strip()
        color1 = data.get('color1', '').strip().lstrip('#')
        color2 = data.get('color2', '').strip().lstrip('#') if data.get('color2') else None
        members_raw = data.get('members', '').strip()
        user_id = data.get('userId')  # ID –∑–∞—è–≤–∏—Ç–µ–ª—è —Å —Å–∞–π—Ç–∞
        
        if not role_name or not color1 or not members_raw:
            return web.json_response({'error': 'Missing required fields'}, status=400)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏ –≥–∏–ª—å–¥–∏—é
        bot = _bot_instance
        if not bot:
            return web.json_response({'error': 'Bot not ready'}, status=503)
        
        guild_id = int(os.getenv("DISCORD_GUILD_ID", "1338592151293919354"))
        guild = bot.get_guild(guild_id)
        if not guild:
            return web.json_response({'error': 'Guild not found'}, status=404)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª (–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –±—É–¥–µ—Ç –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ)
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=False),
            guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∏—Ç–µ–ª—è (–µ—Å–ª–∏ —ç—Ç–æ Discord ID)
        if user_id:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ int (–µ—Å–ª–∏ —ç—Ç–æ Discord ID)
                discord_id = int(user_id)
                applicant = guild.get_member(discord_id)
                if applicant:
                    overwrites[applicant] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
                    logging.info(f"Added applicant {applicant.name} to channel")
            except (ValueError, TypeError):
                # –ï—Å–ª–∏ –Ω–µ Discord ID (–Ω–∞–ø—Ä–∏–º–µ—Ä UUID —Å —Å–∞–π—Ç–∞) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                logging.warning(f"user_id '{user_id}' is not a Discord ID, skipping applicant")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for member in guild.members:
            if member.guild_permissions.administrator:
                overwrites[member] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
        
        channel_name = f"gradient-{role_name.lower().replace(' ', '-')}"[:100]
        channel = await guild.create_text_channel(
            name=channel_name,
            overwrites=overwrites,
            reason=f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—É—é —Ä–æ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        )
        
        # –°–æ–∑–¥–∞–µ–º embed —Å –∑–∞—è–≤–∫–æ–π
        color_value = int(color1, 16) if color1 else 0x5865F2
        embed = discord.Embed(
            title="üåà –ó–∞—è–≤–∫–∞ –Ω–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—É—é —Ä–æ–ª—å",
            description=f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ {'–≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–π' if color2 else '—Ü–≤–µ—Ç–Ω–æ–π'} —Ä–æ–ª–∏",
            color=discord.Color(color_value),
            timestamp=discord.utils.utcnow()
        )
        embed.add_field(name="üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏", value=role_name, inline=False)
        embed.add_field(name="üé® –¶–≤–µ—Ç 1", value=f"#{color1.upper()}", inline=True)
        if color2:
            embed.add_field(name="üé® –¶–≤–µ—Ç 2 (–≥—Ä–∞–¥–∏–µ–Ω—Ç)", value=f"#{color2.upper()}", inline=True)
        embed.add_field(name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ (—É–∫–∞–∑–∞–Ω–Ω—ã–µ)", value=members_raw, inline=False)
        embed.add_field(name="üìä –°—Ç–∞—Ç—É—Å", value="‚è≥ **–û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è**", inline=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º embed –≤ –∫–∞–Ω–∞–ª
        msg = await channel.send(embed=embed)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        await channel.send(
            f"üìå **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n"
            f"1. –û—Ç–º–µ—Ç—å—Ç–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ\n"
            f"2. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            f"```/assignrole members:@user1 @user2 role_name:\"{role_name}\" color_hex:#{color1}```\n"
            f"{'‚ö†Ô∏è **–ì—Ä–∞–¥–∏–µ–Ω—Ç**: –î–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–π—Ç–µ 2 —Ä–æ–ª–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤—Ä—É—á–Ω—É—é' if color2 else ''}"
        )
        
        logging.info(f"‚úÖ Created gradient role request channel: {channel.id} for role '{role_name}'")
        
        return web.json_response({
            'success': True,
            'channelId': str(channel.id),
            'channelName': channel.name
        })
        
    except discord.Forbidden as exc:
        logging.error(f"‚ùå Permission denied when creating channel: {exc}")
        return web.json_response({
            'success': False,
            'error': '–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞'
        }, status=403)
    except discord.HTTPException as exc:
        logging.error(f"‚ùå Discord API error: {exc}")
        return web.json_response({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ Discord API: {exc}'
        }, status=500)
    except Exception as exc:
        logging.error(f"‚ùå Error handling gradient role request: {exc}", exc_info=True)
        return web.json_response({
            'success': False,
            'error': str(exc)
        }, status=500)


async def start_http_server(bot: commands.Bot, port: int, secret: str):
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ —Å –¥–∞—à–±–æ—Ä–¥–∞"""
    global _bot_instance
    _bot_instance = bot
    
    app = web.Application()
    app['api_secret'] = secret
    app.router.add_post('/api/gradient-role', handle_gradient_role_request)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, 'localhost', port)
    await site.start()
    
    logging.info(f"üåê HTTP API server started on http://localhost:{port}")
    return runner


def main() -> None:
    token = os.getenv("DISCORD_BOT_TOKEN")
    if not token:
        raise RuntimeError("Environment variable DISCORD_BOT_TOKEN must be set.")

    # ID —Å–µ—Ä–≤–µ—Ä–∞ Discord (–ø—Ä–æ–ø–∏—Å–∞–Ω –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ)
    guild_id_raw = os.getenv("DISCORD_GUILD_ID", "1338592151293919354")
    guild_id = int(guild_id_raw) if guild_id_raw else None

    prefix = os.getenv("DISCORD_PREFIX", "!")

    intents = discord.Intents.default()
    intents.members = True
    intents.message_content = True

    logging.basicConfig(
        level=logging.INFO,
        format="[%(asctime)s] %(levelname)s %(name)s: %(message)s",
    )
    
    # –û—Ç–∫–ª—é—á–∞–µ–º —Å–ø–∞–º-–ª–æ–≥–∏ –æ—Ç httpx (Supabase)
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("httpcore").setLevel(logging.WARNING)

    VERIFICATION_ROLE_ID = 1_359_572_335_635_464_303
    ANNOUNCE_CHANNEL_ID = 1_426_314_731_903_258_764
    MEMBER_EVENTS_CHANNEL_ID = 1_427_334_027_114_975_275
    LOG_CHANNEL_ID = 1_427_335_159_291_838_616
    COMMAND_LIST_CHANNEL_ID = 1_427_339_269_738_856_530
    CONTENT_GUARD_EXEMPT_USER_ID = 663_045_468_871_196_709
    ROLE_POSITION_REFERENCE_ID = 1_380_215_358_685_839_461
    TICKET_SYSTEM_CHANNEL_ID = 1_430_092_137_583_870_092
    API_PORT = int(os.getenv("API_PORT", "8787"))
    API_SECRET = os.getenv("API_SECRET", "bublickrust")
    RUST_SERVER_HOST = os.getenv("RUST_SERVER_HOST", "185.189.255.110")
    RUST_SERVER_PORT = int(os.getenv("RUST_SERVER_PORT", "35200"))
    RUST_QUERY_PORT = (
        int(os.getenv("RUST_QUERY_PORT"))
        if os.getenv("RUST_QUERY_PORT")
        else None
    )
    RUST_STATUS_INTERVAL = 60
    COMMAND_LIST_HEADER = "‚ÑπÔ∏è **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞**"
    AUTO_DELETE_DELAY_SECONDS = int(os.getenv("BOT_MESSAGE_TTL", "600"))
    RULE_CATEGORIES = [
        {
            "value": "verifications",
            "label": "–ü—Ä–æ–≤–µ—Ä–∫–∏",
            "description": "–ü—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü—Ä–æ–≤–µ—Ä–∫–∏",
            "title": "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫:",
            "body": """‚Ä¢ 0.1
–ü—Ä–∏ –∏–≥—Ä–µ –Ω–∞ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Discord. –û–Ω –Ω—É–∂–µ–Ω –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤–∞—Å –≤—ã–∑–æ–≤—É—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ë–∞–Ω.

‚Ä¢ 0.2
–í —Å–ª—É—á–∞–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏/–∞–¥–º–∏–Ω–∞–º–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ Discord.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ë–∞–Ω.

‚Ä¢ 0.3
–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–∫–∏–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞/–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ë–∞–Ω.

‚Ä¢ 0.4
–ü—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞/–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º—ã –≤–ø—Ä–∞–≤–µ –∑–∞–±–∞–Ω–∏—Ç—å –≤–∞—Å –ø–æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–∫–∞–∑–∞.

‚Ä¢ 0.5
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç ¬´–æ–¥–∏–Ω –Ω–∞ –æ–¥–∏–Ω¬ª (–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π/–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä/–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä/–°—Ç–∞–∂—ë—Ä). –ü–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞.

‚Ä¢ 0.6
–ü—Ä–∏ –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ –º—ã –º–æ–∂–µ–º –Ω–∞–∫–∞–∑–∞—Ç—å –≤–∞—Å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ç—è–∂–µ—Å—Ç—å—é –≤–∞—à–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.

‚Ä¢ 0.7
–ï—Å–ª–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –∏–≥—Ä–æ–∫–∞ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –º–∞–∫—Ä–æ—Å–æ–≤/—á–∏—Ç–æ–≤, –º–æ–¥–µ—Ä–∞—Ü–∏—è/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –≤—ã–¥–∞—Ç—å –≤–∞–º –±–∞–Ω –Ω–∞ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ü–æ —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
–ü—Ä–æ—Ö–æ–¥—è –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ú–æ–¥–µ—Ä–∞—Ü–∏–∏/–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É PC –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–º (–∏—Å—Ç–æ—Ä–∏—è –±—Ä–∞—É–∑–µ—Ä–∞, –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã, –ª–∏—á–Ω—ã–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ —Ç.–¥.), –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –Ω—É–∂–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ PC.""",
        },
        {
            "value": "chat",
            "label": "–ß–∞—Ç",
            "description": "–ü—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ß–∞—Ç",
            "title": "–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:",
            "body": """‚Ä¢ 1.1
–ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å —Å–µ–±—è –∑–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –≤—ã –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∏–º –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ú—É—Ç/–ë–∞–Ω.

‚Ä¢ 1.2
–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ª—é–±—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å BUBLICK RUST, –∑–∞–ø—Ä–µ—â–µ–Ω–æ.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ú—É—Ç/–ë–∞–Ω.

‚Ä¢ 1.3
–ó–∞–ø—Ä–µ—â–µ–Ω —Ñ–ª—É–¥ ‚Äî –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ú—É—Ç –æ—Ç 30 –º–∏–Ω—É—Ç.

‚Ä¢ 1.4
–ó–∞–ø—Ä–µ—â–µ–Ω—ã –ª—é–±—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –Ω–∞—Ü–∏–∑–º–∞ –∏ —à–æ–≤–∏–Ω–∏–∑–º–∞.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ú—É—Ç –æ—Ç 7 –¥–Ω–µ–π.

‚Ä¢ 1.5
–ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —à–∫–∞—Ñ–æ–≤ –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ (–∑–∞–ø—Ä–µ—â–µ–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ –ª–∏—á–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –≤ —ç—Ç–æ–º –ø–ª–∞–Ω–µ).
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ë–∞–Ω –æ—Ç 7 –¥–Ω–µ–π.

‚Ä¢ 1.6
–ó–∞–ø—Ä–µ—â–µ–Ω—ã –ª—é–±—ã–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –≤ —Å—Ç–æ—Ä–æ–Ω—É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ú—É—Ç.""",
        },
        {
            "value": "accounts",
            "label": "–ê–∫–∫–∞—É–Ω—Ç—ã",
            "description": "–ü—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ê–∫–∫–∞—É–Ω—Ç—ã",
            "title": "–ü—Ä–∞–≤–∏–ª–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
            "body": """‚Ä¢ 2.1
–ü–µ—Ä–µ–¥–∞—á–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥—Ä—É–≥–æ–º—É –ª–∏—Ü—É –Ω–µ —Å–Ω–∏–º–∞–µ—Ç —Å –≤–∞—Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–æ–¥–µ—è–Ω–Ω–æ–µ –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –±–∞–Ω–æ–º –Ω–∞ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –±—É–¥–µ—Ç.

‚Ä¢ 2.2
–ü–æ–ª—É—á–∏–≤ –ë–ê–ù –Ω–∞ —Å—Ç–∞—Ä–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –µ–≥–æ –∏ –Ω–∞ –Ω–æ–≤–æ–º.

‚Ä¢ 2.3
–ê–∫–∫–∞—É–Ω—Ç—ã, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π "m-a"/"cheat", –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç —Ä–∞–∑–±–∞–Ω—É.

‚Ä¢ 2.4
–ë–∞–Ω—ã –∑–∞ –º–∞–∫—Ä–æ—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∞–ø–µ–ª–ª–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ 90 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –±–∞–Ω–∞.

‚Ä¢ 2.5
–ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞—á–∞ –∞–∫–∫–∞—É–Ω—Ç–∞, –µ—Å–ª–∏ —É —á–µ–ª–æ–≤–µ–∫–∞ –µ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞!

‚Ä¢ 2.6
–ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ/—Ö—Ä–∞–Ω–µ–Ω–∏–µ/—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ/–Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –ü–û –∏–ª–∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ (—á–∏—Ç—ã –∏–ª–∏ –º–∞–∫—Ä–æ—Å—ã), –ø–æ–∑–≤–æ–ª—è—é—â–∏–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞–¥ –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏. –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–∞–Ω –Ω–∞ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ë–∞–Ω –æ—Ç 30 –¥–Ω–µ–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏. (–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: –ø–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –±–æ–ª–µ–µ 3 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥.)

‚Ä¢ 2.7
–ï—Å–ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ VAC –±–∞–Ω–∞ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 180 –¥–Ω–µ–π –∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä—è–º—ã—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –≤–∞—à–µ–π –≤–∏–Ω—ã, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç.""",
        },
        {
            "value": "building",
            "label": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
            "description": "–ü—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
            "title": "–ü—Ä–∞–≤–∏–ª–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:",
            "body": """‚Ä¢ 3.1
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª—É—Ç–æ–≤–æ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –º–µ–π–Ω–µ/–Ω–∞ –∫—Ä—ã—à–µ –º–µ–π–Ω–∞ —Å –ø—Ä—è–º—ã–º –ø—Ä–æ—Ö–æ–¥–æ–º –∫ —ç—Ç–æ–π –ª—É—Ç–æ–≤–æ–π. –ö —à–∫–∞—Ñ—É —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Ö–æ–¥ –∏–ª–∏ –∏–∑ –¥–≤–µ—Ä–µ–π, –∏–ª–∏ –∑–∞ –û–î–ù–û–ô –±—É—Ñ–µ—Ä–∫–æ–π –≤ –ª—É—Ç–æ–≤–æ–π. –ó–ê–ü–†–ï–©–ï–ù–û —Å—Ç–∞–≤–∏—Ç—å —à–∫–∞—Ñ –≤ —é–±–∫–µ, –∞ —Ç–∞–∫–∂–µ —Å—Ç—Ä–æ–∏—Ç—å —Å–æ–µ–¥–∏–Ω—ë–Ω–Ω–∫—É.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ - —Ä–µ–º –º–µ–∏–Ω–∞.

‚Ä¢ 3.2
–ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å —É—Å—ã –æ—Ç —à–∫–∞—Ñ–æ–≤. –¢–∞–∫–∂–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –±–æ–ª—å—à–∏–µ –∏ –∫—Ä—É–≥–ª—ã–µ —à–∫–∞—Ñ—ã, –æ—Å–º–∏–Ω–æ–∂–∫–∏ –∏ –º–≤–∫ —à–∫–∞—Ñ—ã (–ë–æ–ª–µ–µ 8 —Ä–∞–∫–µ—Ç –∏ —à–∫–∞—Ñ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ —á–µ–º –∑–∞ –æ–¥–Ω–æ–π —Å—Ç–µ–Ω–∫–æ–π –∏ –ø–æ—Ç–æ–ª–∫–æ–º).
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–æ–≤/—à–∫–∞—Ñ–∞/–ø—Ä–µ–¥ –∫–ª–∞–Ω—É.

‚Ä¢ 3.3
–ü—Ä–∏ –∑–∞–Ω—è—Ç–∏–∏ –º–µ—Å—Ç–∞ –ø–æ–¥ —Ç–∏—Ç–∞–Ω–∏–∫/–∫–∏–±–∏—Ç–∫—É –≤—ã –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —à–∫–∞—Ñ —Å 10 —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–º–∏ –∏ –Ω–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–µ–Ω–∫–∏.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —É—Å–æ–≤/—É–¥–∞–ª–µ–Ω–∏–µ —à–∫–∞—Ñ–∞.

‚Ä¢ 3.4
–ó–∞–ø—Ä–µ—â–µ–Ω –ª—é–±–æ–π –∞–±—É–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å ‚Äî —Ä–µ–º –º–µ–π–Ω–∞ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.

‚Ä¢ 3.5
–í–æ–∑–ª–µ –º–µ–∏–Ω–∞ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç—Ä–æ–∏—Ç—å –≤—ã—à–∫–∏ –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏, —Ç–∞–∫–∂–µ —Å—Ç–∞–≤–∏—Ç—å —Ç—É—Ä–µ–ª–∏, –ø–≤–æ, –≥–∞–Ω—Ç—Ä–∞–ø—ã –Ω–∞ —à–∫–∞—Ñ—ã.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç(–∞/–æ–≤)/–ü—Ä–µ–¥.

‚Ä¢ 3.6
–ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å –¥–≤–∞ —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö –¥–æ–º–∞ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –º–µ–Ω–µ–µ 3 –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞. –í —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞, –∫–ª–∞–Ω, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏–π—Å—è –ø–æ–∑–∂–µ –ø–µ—Ä–≤–æ–≥–æ, –±—É–¥–µ—Ç —Å–Ω—è—Ç —Å —Ç—É—Ä–Ω–∏—Ä–∞.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –°–Ω—è—Ç–∏–µ –∫–ª–∞–Ω–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∞.

‚Ä¢ 3.7
–ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ/–ø–∏–ª–∞—Ä–Ω—ã–µ –¥–æ–º–∞.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –†–µ–º –¥–æ–º–∞.

‚Ä¢ 3.8
–®–∫–∞—Ñ –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ 1 –¥–≤–µ—Ä—Ü–µ–π –≤ –º–µ–π–Ω–µ –æ—Ç –ª—É—Ç–∞ –æ–∫–æ–ª–æ –ª—É—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 3 –º–∞–ª–µ–Ω—å–∫–∏—Ö —è—â–∏–∫–∞.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: 2/3 –ø—Ä–µ–¥–∞ + –ø–µ—Ä–µ–Ω–æ—Å.""",
        },
        {
            "value": "raids",
            "label": "–†–µ–π–¥—ã",
            "description": "–ü—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –†–µ–π–¥—ã",
            "title": "–ü—Ä–∞–≤–∏–ª–∞ —Ä–µ–π–¥–æ–≤:",
            "body": """‚Ä¢ 4.1
–ü—Ä–∏ —Ä–µ–π–¥–µ –º–µ–π–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –∏–∑ –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∫–ª–∞–Ω–∞ –æ–±—è–∑–∞–Ω –≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—É—é –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è –∑–∞ 5-10 —Å–µ–∫—É–Ω–¥ –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–µ–π–¥–∞ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â—É—é—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ —à–∫–∞—Ñ–∞.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ü—Ä–µ–¥ + —Å–Ω—è—Ç–∏–µ —Ä–µ–π–¥–∞ –±–µ–∑ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤.

‚Ä¢ 4.2
–ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è —Ä–µ–π–¥–∏—Ç—å –º–µ–π–Ω –∫–ª–∞–Ω–∞, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–π –∫–ª–∞–Ω —É–∂–µ –ø–æ–¥–≤–µ—Ä–≥—Å—è —Ä–µ–π–¥—É –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞–Ω–∞. –ù–µ–ª—å–∑—è –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–µ–π–¥ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ª–æ–º–∞—Ç—å –∏ –±–∞–π—Ç–∏—Ç—å —Ç—É—Ä–µ–ª–∏ –∏ –ü–í–û, –∑–∞–ª–µ—Ç–∞—Ç—å –Ω–∞ –º–µ–π–Ω, –ª—É—Ç–∞—Ç—å —è—â–∏–∫–∏ –Ω–∞ —é–±–∫–µ/–º–µ–π–Ω–µ –∏ —Å—Ç—Ä–æ–∏—Ç—å —Ç–∏—Ç–∞–Ω–∏–∫/–∫–∏–±–∏—Ç–∫—É –Ω–∞ –º–µ–π–Ω.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ü—Ä–µ–¥/—Å–Ω—è—Ç–∏–µ –∫–ª–∞–Ω–∞ + —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏).

‚Ä¢ 4.3
–ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–º–µ—Ö—É –≤ –∑–æ–Ω–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ –¥–æ–º–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–≤–µ—Ä–≥—Å—è —Ä–µ–π–¥—É.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ö–∏–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞/–±–∞–Ω –¥–æ –∫–æ–Ω—Ü–∞ –≤–∞–π–ø–∞.

‚Ä¢ 4.4
–ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤–æ –≤—Ä–µ–º—è —Å—Ç–æ–ø —Ä–µ–π–¥–∞ —Ä–µ–π–¥–∏—Ç—å/—É–±–∏–≤–∞—Ç—å/—Å—Ç—Ä–æ–∏—Ç—å/—Ä–µ–º–∞—Ç—å.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ü—Ä–µ–¥ + —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç.

‚Ä¢ 4.5
–ï—Å–ª–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞ —Ä–µ–π–¥-–±–ª–æ–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (—á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å—é –ø–µ—Ä–≤—ã—Ö 10-20 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –†–ë), –ø—Ä–∞–≤–∏–ª–∞ 1—Ö1 —Ä–µ–π–¥–æ–≤ –Ω–∞ –Ω–µ–≥–æ –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è, –∏ –ª—é–±–æ–π –∫–ª–∞–Ω –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –µ–≥–æ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

‚Ä¢ 4.6
–ó–∞–ø—Ä–µ—â–µ–Ω–æ –∑–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫–∏–º–∏ —Å—Ç–µ–Ω–∞–º–∏ —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π –¥–æ–º –≤ —Ä–µ–π–¥-–±–ª–æ–∫–µ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Ö–æ–¥ –Ω–µ –º–µ–Ω—å—à–µ 50%).
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω/–ø—Ä–µ–¥.

‚Ä¢ 4.7
–í —Å–ª—É—á–∞–µ –ø—Ä–æ—Å–≤–µ—Ç–∞ –¥–æ–º–∞ –±–µ–∑ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —á–∏—Ç–µ—Ä–æ–≤ –∏–≥—Ä–æ–≤—ã–º–∏ –ø—É—Ç—è–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –æ—Ç–∫–∞—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –∑–∞–ø–µ—á–∞—Ç–ª–µ–Ω –ø—Ä–æ—Å–≤–µ—Ç. –ï—Å–ª–∏ –æ—Ç–∫–∞—Ç–∞ –Ω–µ –±—É–¥–µ—Ç, —Ä–µ–π–¥ –±—É–¥–µ—Ç –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ü—Ä–µ–¥.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
¬´–°–¢–û–ü –†–ï–ô–î¬ª ‚Äî –ø—Ä–∞–≤–∏–ª–æ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤ –µ–≥–æ —Ä–∞–¥–∏—É—Å–µ –¥–æ–ª–∂–Ω—ã —Å—Ç–æ—è—Ç—å AFK (–∑–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–µ–π–¥–∏—Ç—å, –ª—É—Ç–∞—Ç—å —Å–µ—Ç, –∑–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è, —Ö–æ–¥–∏—Ç—å –ø–æ –∫–∞—Ä—Ç–µ). –ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –±—É–¥–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏–µ.""",
        },
        {
            "value": "gameplay",
            "label": "–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å",
            "description": "–ü—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å",
            "title": "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:",
            "body": """‚Ä¢ 5.1
–í —Å–ª—É—á–∞–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤ –∫–ª–∞–Ω–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ —á–∏—Ç—ã –∏–ª–∏ –ø—Ä–æ—Å–≤–µ—Ç, –∫–ª–∞–Ω –ø–æ–¥–ª–µ–∂–∏—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞–∫—Ä–æ—Å–æ–≤, –∫–ª–∞–Ω –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ë–∞–Ω –æ—Ç 7 –¥–Ω–µ–π.

‚Ä¢ 5.3
–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ª–æ–º–∞—Ç—å/–æ—Ç–¥–∞–≤–∞—Ç—å —Å–≤–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π —à–∫–∞—Ñ, –µ—Å–ª–∏ –≤—ã –æ—Ç–º–µ—á–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–µ.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ë–∞–Ω –æ—Ç 7 –¥–Ω–µ–π.

‚Ä¢ 5.4
–ó–∞–ø—Ä–µ—â–µ–Ω —Ñ–∞—Ä–º –æ—á–∫–æ–≤/–ö–î (–æ—Ç–∫–∏–¥—ã–≤–∞—Ç—å –≤—Å–µ–º –ø–æ–¥—Ä—è–¥ —Å–ø–∞–ª–∫–∏ –ø–æ–¥ –ø—Ä–µ–¥–ª–æ–≥–æ–º —Ä–∞–∑–¥–∞—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ –∏ —É–±–∏–≤–∞—Ç—å –∏—Ö).
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ü—Ä–µ–¥/–±–∞–Ω –∏–≥—Ä–æ–∫–∞ –æ—Ç 14 –¥–Ω–µ–π.

‚Ä¢ 5.5
–ó–∞–ø—Ä–µ—â–µ–Ω—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ/–ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —Å–µ—Ç—ã.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –°–ª–æ–≤–µ—Å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ/–ø—Ä–µ–¥/–±–∞–Ω.

‚Ä¢ 5.6
–ó–∞–ø—Ä–µ—â–µ–Ω—ã —Å–æ—é–∑—ã –º–µ–∂–¥—É –∫–ª–∞–Ω–∞–º–∏.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –°–Ω—è—Ç–∏–µ/–±–∞–Ω.

‚Ä¢ 5.8
–ó–∞–ø—Ä–µ—â–µ–Ω–æ –∫–∏–¥–∞–ª–æ–≤–æ –≤ –ª—é–±–æ–º –≤–∏–¥–µ.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ë–∞–Ω –æ—Ç 7 –¥–Ω–µ–π.

‚Ä¢ 5.9
–ó–∞–ø—Ä–µ—â–µ–Ω DDoS —Å–µ—Ä–≤–µ—Ä–∞.
–ù–∞–∫–∞–∑–∞–Ω–∏–µ: –ë–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.""",
        },
        {
            "value": "trade",
            "label": "–¢–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏",
            "description": "–ü—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¢–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏",
            "title": "–ü–æ–ª–∏—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥:",
            "body": """‚Ä¢ 6.1
–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç, –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥–∏ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è.

‚Ä¢ 6.2
–ü—Ä–∏ —É—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —Ç–æ–≤–∞—Ä–æ–º/—É—Å–ª—É–≥–æ–π, –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –±–µ–∑ –≤–µ—Å–æ–º—ã—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤.""",
        },
        {
            "value": "limits",
            "label": "–õ–∏–º–∏—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤",
            "description": "–ü—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –õ–∏–º–∏—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤",
            "title": "–õ–∏–º–∏—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤:",
            "body": """**–ü—Ä–µ—Å–µ—Ç—ã –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –≤–∞–π–ø–æ–≤:**

‚Ä¢ **m1** ‚Äî –û–±—ä–µ–∫—Ç—ã: 800, –¢—É—Ä–µ–ª–∏: 15, –ü–í–û: 1, –ò–≥—Ä–æ–∫–∏: 1
‚Ä¢ **m2** ‚Äî –û–±—ä–µ–∫—Ç—ã: 1700, –¢—É—Ä–µ–ª–∏: 21, –ü–í–û: 2, –ò–≥—Ä–æ–∫–∏: 2  
‚Ä¢ **m3** ‚Äî –û–±—ä–µ–∫—Ç—ã: 2300, –¢—É—Ä–µ–ª–∏: 26, –ü–í–û: 3, –ò–≥—Ä–æ–∫–∏: 3
‚Ä¢ **m4** ‚Äî –û–±—ä–µ–∫—Ç—ã: 3000, –¢—É—Ä–µ–ª–∏: 30, –ü–í–û: 3, –ò–≥—Ä–æ–∫–∏: 4
‚Ä¢ **m5** ‚Äî –û–±—ä–µ–∫—Ç—ã: 3500, –¢—É—Ä–µ–ª–∏: 35, –ü–í–û: 3, –ò–≥—Ä–æ–∫–∏: 5""",
        },
    ]
    URL_PATTERN = re.compile(r"https?://\S+")
    WIPE_TZ_OFFSET_HOURS = int(os.getenv("WIPE_TZ_OFFSET_HOURS", "3"))
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø—Ä–µ—Å–µ—Ç–µ)
    WIPE_TEAM_SIZE_DEFAULT = int(os.getenv("WIPE_TEAM_SIZE_DEFAULT", "5"))
    WIPE_PRESETS: list[dict[str, object]] = [
        {"key": "team4", "label": "–ö–æ–º–∞–Ω–¥–Ω—ã–π –ª–∏–º–∏—Ç: 4 –∏–≥—Ä–æ–∫–∞", "players": 4},
        {"key": "team5", "label": "–ö–æ–º–∞–Ω–¥–Ω—ã–π –ª–∏–º–∏—Ç: 5 –∏–≥—Ä–æ–∫–æ–≤", "players": 5},
        {"key": "team6", "label": "–ö–æ–º–∞–Ω–¥–Ω—ã–π –ª–∏–º–∏—Ç: 6 –∏–≥—Ä–æ–∫–æ–≤", "players": 6},
        {"key": "team8", "label": "–ö–æ–º–∞–Ω–¥–Ω—ã–π –ª–∏–º–∏—Ç: 8 –∏–≥—Ä–æ–∫–æ–≤", "players": 8},
    ]
    WIPE_LIMITS_PRESETS: dict[str, dict[str, int]] = {
        "m1": {"objects": 800, "turrets": 15, "sam": 1, "players": 1},
        "m2": {"objects": 1700, "turrets": 21, "sam": 2, "players": 2},
        "m3": {"objects": 2300, "turrets": 26, "sam": 3, "players": 3},
        "m4": {"objects": 3000, "turrets": 30, "sam": 3, "players": 4},
        "m5": {"objects": 3500, "turrets": 35, "sam": 3, "players": 5},
    }

    bot = commands.Bot(command_prefix=prefix, intents=intents)
    bot.remove_command("help")
    bot.invite_cache: dict[int, dict[str, int]] = {}
    bot.member_inviters: dict[int, int] = {}
    bot.automod_deleted_messages: dict[int, str] = {}
    bot.tree_synced = False
    bot.rust_status_task: asyncio.Task | None = None
    bot.members_scan_task: asyncio.Task | None = None
    bot.wipe_announcement_count: dict[int, int] = {}  # user_id -> count
    bot.rules_usage_stats: dict[int, dict[str, int]] = {}  # user_id -> {category: count}
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    bot.db: Optional[Database] = None
    if DATABASE_ENABLED:
        try:
            bot.db = get_database()
            logging.info("Database connection established successfully")
        except Exception as db_init_exc:
            logging.error(f"Failed to initialize database: {db_init_exc}")
            bot.db = None

    def iter_target_members(ctx: commands.Context) -> list[discord.Member]:
        if guild_id and ctx.guild and ctx.guild.id != guild_id:
            raise commands.CheckFailure("This command is not available in this server.")
        assert ctx.guild is not None
        return [member for member in ctx.guild.members if not member.bot]

    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
    @tasks.loop(seconds=1.0)
    async def auto_delete_channels_task():
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–Ω–∞–ª—ã –Ω–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç"""
        if not bot.db:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            channels_to_check = await bot.db.get_channels_to_delete()
            
            for channel_data in channels_to_check:
                channel_id = channel_data["channel_id"]
                guild_id_db = channel_data["guild_id"]
                delete_at_str = channel_data["delete_at"]
                
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è
                from datetime import datetime
                delete_at = datetime.fromisoformat(delete_at_str.replace('Z', '+00:00'))
                now = datetime.now(delete_at.tzinfo)
                
                time_left_seconds = int((delete_at - now).total_seconds())
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
                guild = bot.get_guild(guild_id_db)
                if not guild:
                    await bot.db.mark_channel_as_deleted(channel_id)
                    continue
                
                channel = guild.get_channel(channel_id)
                if not channel or not isinstance(channel, discord.TextChannel):
                    await bot.db.mark_channel_as_deleted(channel_id)
                    continue
                
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ - —É–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
                if time_left_seconds <= 0:
                    try:
                        await channel.delete(reason="–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ: –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –±—ã–ª–æ")
                        await bot.db.mark_channel_as_deleted(channel_id)
                        logging.info(f"Auto-deleted channel {channel_id} ({channel.name})")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
                        if bot.db:
                            await bot.db.log_event(
                                guild_id=guild_id_db,
                                event_type="channel_deleted",
                                event_data={"channel_id": channel_id, "channel_name": channel.name}
                            )
                    except (discord.Forbidden, discord.HTTPException) as exc:
                        logging.error(f"Failed to delete channel {channel_id}: {exc}")
                        await bot.db.mark_channel_as_deleted(channel_id)
                    continue
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
                if time_left_seconds % 5 == 0 or time_left_seconds <= 10:
                    minutes = time_left_seconds // 60
                    seconds = time_left_seconds % 60
                    
                    countdown_message = f"‚è∞ **–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ {minutes}–º {seconds}—Å**\n"
                    countdown_message += f"–ï—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –æ–±—Å—É–∂–¥–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä."
                    
                    # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–∏–Ω–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
                    try:
                        pins = await channel.pins()
                        timer_msg = None
                        for pin in pins:
                            if pin.author == bot.user and "‚è∞" in pin.content:
                                timer_msg = pin
                                break
                        
                        if timer_msg:
                            await timer_msg.edit(content=countdown_message)
                        elif time_left_seconds == 3600 or time_left_seconds % 300 == 0:  # –ü–∏–Ω—É–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
                            msg = await channel.send(countdown_message)
                            try:
                                await msg.pin(reason="–¢–∞–π–º–µ—Ä –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è")
                            except discord.HTTPException:
                                pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏–Ω–∏—Ç—å
                    except (discord.Forbidden, discord.HTTPException) as exc:
                        logging.debug(f"Could not update countdown in channel {channel_id}: {exc}")
        
        except Exception as exc:
            logging.error(f"Error in auto_delete_channels_task: {exc}")
    
    @auto_delete_channels_task.before_loop
    async def before_auto_delete_task():
        """–ñ–¥–µ–º –ø–æ–∫–∞ –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è"""
        await bot.wait_until_ready()
    
    async def restore_persistent_views():
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Views –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        logging.info("Restoring persistent views for existing channels...")
        
        for guild in bot.guilds:
            if guild_id and guild.id != guild_id:
                continue
            
            # –ò—â–µ–º –∫–∞–Ω–∞–ª—ã —Å –∑–∞—è–≤–∫–∞–º–∏ (—Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã)
            for channel in guild.text_channels:
                try:
                    async for message in channel.history(limit=50):
                        if message.author != bot.user or not message.embeds:
                            continue
                        embed = message.embeds[0]

                        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Ä–æ–ª—å
                        if embed.title and "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –∑–∞ —Ç—É—Ä–Ω–∏—Ä" in embed.title:
                            status_field = next((f.value for f in embed.fields if f.name == "–°—Ç–∞—Ç—É—Å"), None)
                            if status_field and "–û–∂–∏–¥–∞–Ω–∏–µ" in status_field:
                                role_name = next((f.value for f in embed.fields if f.name == "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"), "")
                                role_color = next((f.value for f in embed.fields if f.name == "–¶–≤–µ—Ç —Ä–æ–ª–∏"), "").replace('#','')
                                tournament_info = next((f.value for f in embed.fields if f.name == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ"), "")
                                applicant_id = None
                                if embed.description:
                                    import re
                                    m = re.search(r"<@!?(\d+)>", embed.description)
                                    if m:
                                        applicant_id = int(m.group(1))
                                if applicant_id and role_name and role_color:
                                    await message.edit(view=TournamentRoleApprovalView(
                                        applicant_id=applicant_id,
                                        role_name=role_name,
                                        role_color=role_color,
                                        channel_id=channel.id,
                                        tournament_info=tournament_info
                                    ))
                                    logging.info("Restored TournamentRoleApprovalView in %s", channel.id)
                            break

                        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –∑–∞—è–≤–∫–∏ –ø–æ–º–æ—â–∏/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞/–∞–¥–º–∏–Ω–∞/—Ä–∞–∑–±–∞–Ω–∞
                        titles_map = {
                            "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–º–æ—â—å": "–ø–æ–º–æ—â—å",
                            "–ó–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞": "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
                            "–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞": "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                            "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–±–∞–Ω": "—Ä–∞–∑–±–∞–Ω",
                        }
                        for t, app_type in titles_map.items():
                            if embed.title and t in embed.title:
                                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ –°—Ç–∞—Ç—É—Å –∏ –æ–Ω–æ –Ω–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º View
                                status_field = next((f.value for f in embed.fields if f.name == "–°—Ç–∞—Ç—É—Å"), None)
                                if status_field and ("–û–∂–∏–¥–∞–Ω–∏–µ" in status_field or "–û–¥–æ–±—Ä–µ–Ω–æ" not in status_field and "–û—Ç–∫–∞–∑" not in status_field):
                                    applicant_id = None
                                    if embed.description:
                                        import re
                                        m = re.search(r"<@!?(\d+)>", embed.description)
                                        if m:
                                            applicant_id = int(m.group(1))
                                    if applicant_id:
                                        await message.edit(view=ApplicationStatusView(applicant_id, app_type))
                                        logging.info("Restored ApplicationStatusView (%s) in %s", app_type, channel.id)
                                break
                except discord.HTTPException as exc:
                    logging.error("Failed to restore view for channel %s: %s", channel.id, exc)
        
        logging.info("Persistent views restoration completed")

    @bot.event
    async def on_ready() -> None:
        logging.info("Logged in as %s (ID: %s)", bot.user, bot.user.id if bot.user else "unknown")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        print("=" * 50)
        print("–ë–û–¢ –ó–ê–ü–£–©–ï–ù –£–°–ü–ï–®–ù–û!")
        print("=" * 50)
        print("–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:")
        print()
        
        # –ü—Ä–µ—Ñ–∏–∫—Å-–∫–æ–º–∞–Ω–¥—ã
        prefix_commands = []
        for command in sorted(bot.commands, key=lambda c: c.name):
            if command.hidden:
                continue
            description = command.help or command.brief or command.short_doc or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            if description.strip().lower() == "no help available.":
                description = "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            description = description.replace("`", "")
            prefix_commands.append(f"  {prefix}{command.name} ‚Äî {description}")
        
        if prefix_commands:
            print("–ü–†–ï–§–ò–ö–°-–ö–û–ú–ê–ù–î–´:")
            for cmd in prefix_commands:
                print(cmd)
            print()
        
        # Slash-–∫–æ–º–∞–Ω–¥—ã
        slash_commands = []
        for command in sorted(bot.tree.get_commands(), key=lambda c: c.qualified_name):
            description = command.description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            description = description.replace("`", "")
            note = ""
            if command.name == "clear":
                note = " (–¥–æ—Å—Ç—É–ø–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É —Å–µ—Ä–≤–µ—Ä–∞)"
            slash_commands.append(f"  /{command.qualified_name} ‚Äî {description}{note}")
        
        if slash_commands:
            print("SLASH-–ö–û–ú–ê–ù–î–´:")
            for cmd in slash_commands:
                try:
                    print(cmd)
                except UnicodeEncodeError:
                    # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
                    import re
                    clean_cmd = re.sub(r'[^\x00-\x7F]+', '', cmd)
                    print(clean_cmd)
            print()
        
        print("=" * 50)
        print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("=" * 50)
        
        if guild_id:
            guild = bot.get_guild(guild_id)
            if guild:
                logging.info("Connected to guild: %s (%s)", guild.name, guild.id)
            else:
                logging.warning("Guild with ID %s not found in bot cache.", guild_id)
        for ready_guild in bot.guilds:
            if guild_id and ready_guild.id != guild_id:
                continue
            try:
                invites = await ready_guild.invites()
            except discord.Forbidden:
                logging.warning(
                    "Missing permissions to read invites for guild %s (%s)",
                    ready_guild.name,
                    ready_guild.id,
                )
                bot.invite_cache[ready_guild.id] = {}
            except discord.HTTPException as exc:
                logging.error(
                    "Failed to fetch invites for guild %s (%s): %s",
                    ready_guild.name,
                    ready_guild.id,
                    exc,
                )
            else:
                bot.invite_cache[ready_guild.id] = {
                    invite.code: invite.uses or 0 for invite in invites
                }

            await ensure_command_reference(ready_guild)

        if not bot.tree_synced:
            try:
                if guild_id:
                    await bot.tree.sync(guild=discord.Object(id=guild_id))
                else:
                    await bot.tree.sync()
            except discord.HTTPException as exc:
                logging.error("Failed to sync application commands: %s", exc)
            else:
                bot.tree_synced = True
                logging.info("Application commands synced successfully.")
                for ready_guild in bot.guilds:
                    if guild_id and ready_guild.id != guild_id:
                        continue
                    await ensure_command_reference(ready_guild)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
        if bot.db and not auto_delete_channels_task.is_running():
            auto_delete_channels_task.start()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º persistent views –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
        await restore_persistent_views()

    def get_log_channel(guild: discord.Guild) -> discord.TextChannel | None:
        channel = guild.get_channel(LOG_CHANNEL_ID)
        return channel if isinstance(channel, discord.TextChannel) else None

    async def send_dm(
        member: discord.Member,
        *,
        content: str | None = None,
        embed: discord.Embed | None = None,
        embed_factory: Callable[[], discord.Embed] | None = None,
        view_factory: Callable[[], discord.ui.View] | None = None,
    ) -> bool:
        built_embed = embed_factory() if embed_factory else embed
        view = view_factory() if view_factory else None
        if content is None and built_embed is None:
            raise ValueError("Either content or embed must be provided for DM.")
        try:
            await member.send(content=content, embed=built_embed, view=view)
            return True
        except discord.Forbidden:
            logging.warning("Cannot message %s (%s) - DMs disabled.", member.display_name, member.id)
            return False
        except discord.HTTPException as exc:
            logging.error("Failed to message %s (%s): %s", member.display_name, member.id, exc)
            return False

    async def send_log_embed(
        guild: discord.Guild,
        *,
        title: str,
        description: str,
        color: discord.Color,
        fields: Iterable[tuple[str, str, bool]] | None = None,
    ) -> None:
        channel = get_log_channel(guild)
        if channel is None:
            logging.warning(
                "Log channel %s not found or inaccessible in guild %s",
                LOG_CHANNEL_ID,
                guild.id,
            )
            return

        embed = discord.Embed(
            title=title,
            description=description,
            color=color,
            timestamp=discord.utils.utcnow(),
        )
        if fields:
            for name, value, inline in fields:
                embed.add_field(
                    name=name,
                    value=value if value else "‚Äî",
                    inline=inline,
                )
        await channel.send(embed=embed)

    async def publish_member_event(
        *,
        guild: discord.Guild,
        title: str,
        description: str,
        inviter_text: str,
        member: discord.abc.User,
        color: discord.Color,
    ) -> None:
        channel = guild.get_channel(MEMBER_EVENTS_CHANNEL_ID)
        if not isinstance(channel, discord.TextChannel):
            logging.warning(
                "Member events channel %s not found or not a text channel in guild %s",
                MEMBER_EVENTS_CHANNEL_ID,
                guild.id,
            )
            return

        embed = discord.Embed(title=title, description=description, color=color)
        embed.add_field(name="–ü—Ä–∏–≥–ª–∞—Å–∏–ª", value=inviter_text, inline=True)
        embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ–π—á–∞—Å", value=str(guild.member_count), inline=True)

        if isinstance(member, discord.Member):
            avatar = member.display_avatar
            embed.set_footer(text=f"ID: {member.id} ‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω {member.created_at:%d.%m.%Y}")
        else:
            avatar = member.display_avatar
            embed.set_footer(text=f"ID: {member.id}")

        if avatar:
            embed.set_thumbnail(url=avatar.url)

        await channel.send(embed=embed)

    def trim_field(value: str, limit: int = 1024) -> str:
        return value if len(value) <= limit else f"{value[:limit-3]}..."

    def message_has_restricted_content(message: discord.Message) -> bool:
        if message.attachments or message.stickers:
            return True
        if URL_PATTERN.search(message.content or ""):
            return True
        # Some embeds appear immediately (e.g., when bots post links)
        if message.embeds:
            return True
        return False

    def prefix_command_lines() -> list[str]:
        lines: list[str] = []
        for command in sorted(bot.commands, key=lambda c: c.name):
            if command.hidden:
                continue
            description = command.help or command.brief or command.short_doc or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            if description.strip().lower() == "no help available.":
                description = "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            description = description.replace("`", "")
            lines.append(f"`{prefix}{command.name}` ‚Äî {description}")
        return lines

    def slash_command_lines() -> list[str]:
        lines: list[str] = []
        for command in sorted(bot.tree.get_commands(), key=lambda c: c.qualified_name):
            description = command.description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            description = description.replace("`", "")
            note = ""
            if command.name == "clear":
                note = " (–¥–æ—Å—Ç—É–ø–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É —Å–µ—Ä–≤–µ—Ä–∞)"
            lines.append(f"`/{command.qualified_name}` ‚Äî {description}{note}")
        return lines

    async def build_command_message() -> tuple[str, discord.Embed]:
        now = discord.utils.utcnow()
        content = f"{COMMAND_LIST_HEADER}\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: <t:{int(now.timestamp())}:R>"

        embed = discord.Embed(
            title="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
            description="–í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.",
            color=discord.Color.gold(),
            timestamp=now,
        )

        prefix_lines = prefix_command_lines()
        slash_lines = slash_command_lines()

        if prefix_lines:
            embed.add_field(
                name="–ü—Ä–µ—Ñ–∏–∫—Å-–∫–æ–º–∞–Ω–¥—ã",
                value="\n".join(prefix_lines),
                inline=False,
            )
        if slash_lines:
            embed.add_field(
                name="Slash-–∫–æ–º–∞–Ω–¥—ã",
                value="\n".join(slash_lines),
                inline=False,
            )

        embed.set_footer(text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        return content, embed

    async def ensure_command_reference(guild: discord.Guild) -> None:
        channel: discord.abc.GuildChannel | None = guild.get_channel(COMMAND_LIST_CHANNEL_ID)
        if channel is None:
            channel = bot.get_channel(COMMAND_LIST_CHANNEL_ID)
        if channel is None:
            try:
                channel = await guild.fetch_channel(COMMAND_LIST_CHANNEL_ID)
            except discord.Forbidden:
                logging.warning(
                    "Command list channel %s exists but –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ guild %s",
                    COMMAND_LIST_CHANNEL_ID,
                    guild.id,
                )
                return
            except discord.HTTPException as exc:
                logging.error(
                    "Failed to fetch command list channel %s in guild %s: %s",
                    COMMAND_LIST_CHANNEL_ID,
                    guild.id,
                    exc,
                )
                return

        if not isinstance(channel, discord.TextChannel):
            logging.warning(
                "Command list channel %s not found or not a text channel in guild %s",
                COMMAND_LIST_CHANNEL_ID,
                guild.id,
            )
            return

        content, embed = await build_command_message()

        pins: list[discord.Message] = []
        try:
            async for message in channel.pins():
                pins.append(message)
        except discord.HTTPException as exc:
            logging.error("Failed to iterate pins in channel %s: %s", channel.id, exc)
            return

        target_message: discord.Message | None = None
        duplicates: list[discord.Message] = []
        for message in pins:
            if message.author == bot.user and COMMAND_LIST_HEADER in (message.content or ""):
                if target_message is None:
                    target_message = message
                else:
                    duplicates.append(message)

        for duplicate in duplicates:
            try:
                await duplicate.unpin()
            except discord.HTTPException as exc:
                logging.warning("Failed to unpin duplicate command message %s: %s", duplicate.id, exc)

        if target_message:
            existing_embed = target_message.embeds[0].to_dict() if target_message.embeds else None
            needs_update = (target_message.content != content) or (existing_embed != embed.to_dict())
            if needs_update:
                try:
                    await target_message.edit(content=content, embed=embed)
                except discord.HTTPException as exc:
                    logging.error("Failed to edit command list message %s: %s", target_message.id, exc)
        else:
            try:
                message = await channel.send(content=content, embed=embed)
            except discord.HTTPException as exc:
                logging.error("Failed to send command list message in channel %s: %s", channel.id, exc)
                return
            try:
                await message.pin()
            except discord.HTTPException as exc:
                logging.warning("Failed to pin command list message %s: %s", message.id, exc)

    _A2S_INFO_REQUEST = b"\xFF\xFF\xFF\xFFTSource Engine Query\x00"

    def _query_source_info_blocking(host: str, port: int, *, timeout: float) -> bytes:
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock:
            sock.settimeout(timeout)
            sock.sendto(_A2S_INFO_REQUEST, (host, port))
            data, _ = sock.recvfrom(4096)
            if len(data) >= 5 and data[4] == 0x41:  # Challenge
                challenge = data[5:9]
                sock.sendto(_A2S_INFO_REQUEST + challenge, (host, port))
                data, _ = sock.recvfrom(4096)
            return data

    def _parse_source_info(payload: bytes) -> dict[str, object]:
        if len(payload) < 5 or payload[4:5] != b"I":
            raise ValueError("Unexpected A2S_INFO response.")

        offset = 5

        def read_uint8() -> int:
            nonlocal offset
            if offset >= len(payload):
                raise ValueError("Unexpected end of payload.")
            value = payload[offset]
            offset += 1
            return value

        def read_uint16() -> int:
            nonlocal offset
            if offset + 2 > len(payload):
                raise ValueError("Unexpected end of payload.")
            value = struct.unpack_from("<H", payload, offset)[0]
            offset += 2
            return value

        def read_string() -> str:
            nonlocal offset
            end = payload.find(b"\x00", offset)
            if end == -1:
                raise ValueError("String terminator not found.")
            value = payload[offset:end].decode("utf-8", errors="replace")
            offset = end + 1
            return value

        _protocol = read_uint8()
        name = read_string()
        _map_name = read_string()
        _folder = read_string()
        game = read_string()
        _app_id = read_uint16()
        players = read_uint8()
        max_players = read_uint8()
        _bots = read_uint8()
        _server_type = read_uint8()
        _environment = read_uint8()
        _visibility = read_uint8()
        _vac = read_uint8()
        version = read_string()

        return {
            "name": name,
            "game": game,
            "players": players,
            "max_players": max_players,
            "version": version,
        }

    async def query_rust_server(host: str, port: int) -> dict[str, object]:
        attempts = []
        if RUST_QUERY_PORT is not None:
            attempts.append(RUST_QUERY_PORT)
        attempts.append(port)
        if port < 65535 and (RUST_QUERY_PORT is None or RUST_QUERY_PORT != port + 1):
            attempts.append(port + 1)
        errors: list[str] = []

        for attempt_port in attempts:
            try:
                payload = await asyncio.to_thread(
                    _query_source_info_blocking,
                    host,
                    attempt_port,
                    timeout=3.0,
                )
                info = _parse_source_info(payload)
                info["query_port"] = attempt_port
                return info
            except Exception as exc:  # noqa: BLE001
                errors.append(f"{attempt_port}: {exc}")

        raise RuntimeError(f"Rust server query failed ({'; '.join(errors)})")

    async def rust_presence_worker() -> None:
        await bot.wait_until_ready()
        while not bot.is_closed():
            try:
                info = await query_rust_server(RUST_SERVER_HOST, RUST_SERVER_PORT)
            except RuntimeError as exc:
                # logging.warning("%s", exc)  # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await bot.change_presence(
                    status=discord.Status.idle,
                    activity=discord.Activity(
                        type=discord.ActivityType.watching,
                        name="Rust —Å–µ—Ä–≤–µ—Ä –æ—Ñ—Ñ–ª–∞–π–Ω",
                    ),
                )
            else:
                name = info.get("name") or "Rust —Å–µ—Ä–≤–µ—Ä"
                players = info.get("players") or 0
                max_players = info.get("max_players") or 0
                query_port = info.get("query_port")
                logging.info(
                    "Rust server status OK via port %s: %s/%s players (%s)",
                    query_port,
                    players,
                    max_players,
                    name,
                )
                activity_text = f"Rust {players}/{max_players} ‚Ä¢ {name}"
                if len(activity_text) > 128:
                    activity_text = activity_text[:125] + "..."
                await bot.change_presence(
                    status=discord.Status.online,
                    activity=discord.Game(activity_text),
                )
            try:
                await asyncio.sleep(RUST_STATUS_INTERVAL)
            except asyncio.CancelledError:
                break

    @bot.event
    async def setup_hook() -> None:
        if bot.rust_status_task is None:
            bot.rust_status_task = asyncio.create_task(rust_presence_worker())
        if DATABASE_ENABLED and bot.members_scan_task is None:
            bot.members_scan_task = asyncio.create_task(members_scan_worker())
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ —Å –¥–∞—à–±–æ—Ä–¥–∞
        asyncio.create_task(start_http_server(bot, API_PORT, API_SECRET))

    async def members_scan_worker() -> None:
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–∏–ª—å–¥–∏–∏ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."""
        await bot.wait_until_ready()
        interval = 300  # 5 –º–∏–Ω—É—Ç
        while not bot.is_closed():
            try:
                for g in bot.guilds:
                    if guild_id and g.id != guild_id:
                        continue
                    if not bot.db:
                        continue
                    # —Å–æ–±–∏—Ä–∞–µ–º —á–ª–µ–Ω–æ–≤
                    members_payload: list[dict[str, object]] = []
                    async for member in g.fetch_members(limit=None):
                        members_payload.append({
                            "member_id": member.id,
                            "username": str(member.name),
                            "display_name": str(member.display_name),
                            "is_bot": bool(member.bot),
                            "joined_at": (member.joined_at.isoformat() if member.joined_at else None),
                        })
                    await bot.db.upsert_guild_members(g.id, members_payload)
                    await bot.db.log_member_count(g.id, g.member_count or len(members_payload))
            except Exception as exc:  # noqa: BLE001
                logging.error("members_scan_worker error: %s", exc)
            try:
                await asyncio.sleep(interval)
            except asyncio.CancelledError:
                break

    def schedule_auto_delete(message: discord.Message, *, delay: int | None = AUTO_DELETE_DELAY_SECONDS) -> None:
        if not delay or delay <= 0:
            return

        async def _delete_later() -> None:
            try:
                await asyncio.sleep(delay)
                await message.delete()
            except asyncio.CancelledError:
                return
            except discord.NotFound:
                pass
            except discord.HTTPException as exc:
                logging.debug("Failed to auto-delete message %s: %s", message.id, exc)

        asyncio.create_task(_delete_later())

    class DismissView(discord.ui.View):
        def __init__(self, *, author_id: int, timeout: float | None = 120) -> None:
            super().__init__(timeout=timeout)
            self.author_id = author_id

        @discord.ui.button(
            label="–°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            style=discord.ButtonStyle.danger,
            emoji="üóëÔ∏è",
            custom_id="dismiss_button",
        )
        async def dismiss(
            self,
            interaction: discord.Interaction,
            button: discord.ui.Button,
        ) -> None:
            if interaction.user.id != self.author_id and not interaction.user.guild_permissions.manage_messages:
                await interaction.response.send_message(
                    "–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–∫—Ä—ã—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    ephemeral=True,
                )
                return

            await interaction.response.send_message("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ.", ephemeral=True)
            try:
                await interaction.message.delete()
            except discord.HTTPException as exc:
                logging.warning("Failed to delete help message %s: %s", interaction.message.id, exc)

    class LimitsPresetSelect(discord.ui.Select):
        def __init__(self, *, author_id: int) -> None:
            options = [
                discord.SelectOption(label="m1", value="m1", description="a=800 t=15 p=1"),
                discord.SelectOption(label="m2", value="m2", description="a=1700 t=21 p=2"),
                discord.SelectOption(label="m3", value="m3", description="a=2300 t=26 p=3"),
                discord.SelectOption(label="m4", value="m4", description="a=3000 t=30 p=3"),
                discord.SelectOption(label="m5", value="m5", description="a=3500 t=35 p=3"),
            ]
            super().__init__(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç –ª–∏–º–∏—Ç–æ–≤ (m1‚Äìm5)",
                min_values=1,
                max_values=1,
                options=options,
                custom_id="wipe_limits_preset_select",
            )
            self.author_id = author_id

        async def callback(self, interaction: discord.Interaction) -> None:
            if interaction.user.id != self.author_id and not interaction.user.guild_permissions.manage_messages:
                await interaction.response.send_message(
                    "–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é.",
                    ephemeral=True,
                )
                return

            key = self.values[0]
            if key not in WIPE_LIMITS_PRESETS:
                await interaction.response.send_message("–ü—Ä–µ—Å–µ—Ç –ª–∏–º–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
                return
            view = self.view
            if isinstance(view, WipeView):
                view.selected_limits_key = key
            await interaction.response.send_message(
                f"–í—ã–±—Ä–∞–Ω –ø—Ä–µ—Å–µ—Ç –ª–∏–º–∏—Ç–æ–≤: {key}.",
                ephemeral=True,
            )

    class ProceedButton(discord.ui.Button):
        def __init__(self, *, author_id: int) -> None:
            super().__init__(
                label="–î–∞–ª–µ–µ",
                style=discord.ButtonStyle.primary,
                emoji="‚û°Ô∏è",
                custom_id="wipe_proceed_button",
            )
            self.author_id = author_id

        async def callback(self, interaction: discord.Interaction) -> None:
            if interaction.user.id != self.author_id and not interaction.user.guild_permissions.manage_messages:
                await interaction.response.send_message(
                    "–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                    ephemeral=True,
                )
                return

            view = self.view
            if not isinstance(view, WipeView):
                await interaction.response.send_message("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: view –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
                return

            if view.selected_limits_key is None:
                await interaction.response.send_message(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç m1‚Äìm5, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ'.",
                    ephemeral=True,
                )
                return

            try:
                await interaction.response.send_modal(
                    WipeTimeModal(author_id=self.author_id, limits_key=view.selected_limits_key)
                )
            except Exception as exc:  # noqa: BLE001
                logging.error("Failed to open WipeTimeModal: %s", exc)
                await interaction.followup.send(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                    ephemeral=True,
                )

    class WipeView(discord.ui.View):
        def __init__(self, *, author_id: int, timeout: float | None = 300) -> None:
            super().__init__(timeout=timeout)
            self.author_id = author_id
            self.selected_limits_key: str | None = None
            self.add_item(LimitsPresetSelect(author_id=author_id))
            self.add_item(ProceedButton(author_id=author_id))

    class WipeTimeModal(discord.ui.Modal, title="–í—Ä–µ–º—è –≤–∞–π–ø–∞"):
        def __init__(self, *, author_id: int, limits_key: str) -> None:
            super().__init__()
            self.author_id = author_id
            self.limits_key = limits_key

            self.time_input = discord.ui.TextInput(
                label="–í—Ä–µ–º—è (–ß–ß:–ú–ú, –ú–°–ö)",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 19:00",
                style=discord.TextStyle.short,
                required=True,
            )

            self.add_item(self.time_input)

        async def on_submit(self, interaction: discord.Interaction) -> None:
            if interaction.user.id != self.author_id and not interaction.user.guild_permissions.manage_messages:
                await interaction.response.send_message(
                    "–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.",
                    ephemeral=True,
                )
                return

            if interaction.guild is None:
                await interaction.response.send_message("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
                return

            raw = (self.time_input.value or "").strip()
            try:
                hhmm = datetime.datetime.strptime(raw, "%H:%M")
            except ValueError:
                await interaction.response.send_message(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–ú–°–ö).",
                    ephemeral=True,
                )
                return

            now_local = datetime.datetime.now()
            parsed_local = now_local.replace(hour=hhmm.hour, minute=hhmm.minute, second=0, microsecond=0)

            # –ü–µ—Ä–µ–≤–µ–¥—ë–º –ª–æ–∫–∞–ª—å–Ω–æ–µ (–ú–°–ö) –≤—Ä–µ–º—è –≤ UTC –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–∞–π–º—Å—Ç–∞–º–ø–æ–≤ –≤ Discord
            wipe_dt_utc = parsed_local - datetime.timedelta(hours=WIPE_TZ_OFFSET_HOURS)
            wipe_dt_utc = wipe_dt_utc.replace(tzinfo=datetime.timezone.utc)

            limits = WIPE_LIMITS_PRESETS.get(self.limits_key)
            if limits is None:
                await interaction.response.send_message("–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ—Å–µ—Ç –ª–∏–º–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
                return

            try:
                await interaction.response.defer(ephemeral=True, thinking=True)
                message = await send_wipe_message(
                    interaction.guild,
                    wipe_time=wipe_dt_utc,
                    limits=limits,
                    user_id=interaction.user.id,
                )
            except discord.HTTPException as exc:
                logging.error("Failed to send wipe announcement: %s", exc)
                await interaction.followup.send(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Discord.",
                    ephemeral=True,
                )
                return

            await interaction.followup.send(
                f"–ì–æ—Ç–æ–≤–æ. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {message.channel.mention}.",
                ephemeral=True,
            )
            # –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            asyncio.create_task(
                schedule_wipe_reminders(
                    interaction.guild,
                    wipe_dt_utc,
                    limits=limits,
                )
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞–π–ø–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            if bot.db:
                await bot.db.log_event(
                    guild_id=interaction.guild.id,
                    event_type="wipe_created",
                    event_data={
                        "wipe_time": wipe_dt_utc.isoformat(),
                        "limits": limits,
                        "author_id": interaction.user.id
                    }
                )

    def _emoji_or_text(guild: discord.Guild | None, name: str, fallback: str) -> str:
        if guild is None:
            return fallback
        emoji = discord.utils.get(guild.emojis, name=name)
        return str(emoji) if emoji else fallback

    def build_wipe_announce_embed(
        *,
        guild: discord.Guild | None,
        limits: dict[str, int],
        wipe_time: datetime.datetime,
    ) -> discord.Embed:
        title_emoji = _emoji_or_text(guild, "wipe", ":wipe:")
        embed = discord.Embed(
            title=f"{title_emoji} –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –≤–∞–π–ø–µ",
            description=(
                "–í–∞–π–ø —Å–µ—Ä–≤–µ—Ä–∞. –ù–∏–∂–µ —É–∫–∞–∑–∞–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã."
            ),
            color=discord.Color.orange(),
            timestamp=discord.utils.utcnow(),
        )
        # –í—Ä–µ–º—è –≤–∞–π–ø–∞ ‚Äî –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        when_abs = discord.utils.format_dt(wipe_time, style="F")
        when_rel = discord.utils.format_dt(wipe_time, style="R")
        msk_time = (wipe_time + datetime.timedelta(hours=WIPE_TZ_OFFSET_HOURS)).strftime("%H:%M")
        embed.add_field(name="–í—Ä–µ–º—è –≤–∞–π–ø–∞", value=f"{when_abs} ({when_rel})\n–ú–°–ö: {msk_time}", inline=False)

        # –ü–æ–ª—è: –û–±—ä–µ–∫—Ç—ã, –¢—É—Ä–µ–ª–∏, –ü–í–û —Å —ç–º–æ–¥–∑–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
        building_emoji = _emoji_or_text(guild, "building", ":building:")
        autoturret_emoji = _emoji_or_text(guild, "autoturret", ":autoturret:")
        samsite_emoji = _emoji_or_text(guild, "samsite", ":samsite:")
        players_emoji = _emoji_or_text(guild, "players", ":players:")
        team_size = int(limits.get("players", WIPE_TEAM_SIZE_DEFAULT))

        embed.add_field(name=f"{building_emoji} –û–±—ä–µ–∫—Ç—ã", value=str(limits.get("objects", "‚Äî")), inline=True)
        embed.add_field(name=f"{autoturret_emoji} –¢—É—Ä–µ–ª–∏", value=str(limits.get("turrets", "‚Äî")), inline=True)
        embed.add_field(name=f"{samsite_emoji} –ü–í–û", value=str(limits.get("sam", "‚Äî")), inline=True)
        embed.add_field(name=f"{players_emoji} –ò–≥—Ä–æ–∫–∏", value=str(team_size), inline=True)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ª–∏–º–∏—Ç–æ–≤
        limits_description = "**–õ–∏–º–∏—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤:**\n"
        limits_description += f"‚Ä¢ –û–±—ä–µ–∫—Ç—ã: {limits.get('objects', '‚Äî')}\n"
        limits_description += f"‚Ä¢ –¢—É—Ä–µ–ª–∏: {limits.get('turrets', '‚Äî')}\n"
        limits_description += f"‚Ä¢ –ü–í–û: {limits.get('sam', '‚Äî')}\n"
        limits_description += f"‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ: {team_size}\n\n"
        limits_description += "**–í–∞–∂–Ω–æ:**\n"
        limits_description += "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ª–∏–º–∏—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ\n"
        limits_description += "‚Ä¢ –ù–µ –ø—Ä–µ–≤—ã—à–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–µ–ª–µ–π –∏ –ü–í–û\n"
        limits_description += "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤"
        
        embed.add_field(name="üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã", value=limits_description, inline=False)

        embed.set_footer(text="–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return embed

    async def send_wipe_message(
        guild: discord.Guild,
        *,
        wipe_time: datetime.datetime,
        limits: dict[str, int],
        user_id: int,
    ) -> discord.Message:
        channel = guild.get_channel(ANNOUNCE_CHANNEL_ID)
        if not isinstance(channel, discord.TextChannel):
            logging.warning("Announcement channel %s not found in guild %s", ANNOUNCE_CHANNEL_ID, guild.id)
            raise discord.HTTPException(response=None, message="Announcement channel not found")

        embed = build_wipe_announce_embed(
            guild=guild,
            limits=limits,
            wipe_time=wipe_time,
        )

        message = await channel.send(content="@everyone", embed=embed, view=DismissView(author_id=guild.owner_id or 0))
        try:
            await message.pin()
        except discord.HTTPException as exc:
            logging.warning("Failed to pin wipe announcement %s: %s", message.id, exc)

        # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–π–ø–∞
        now = discord.utils.utcnow().replace(tzinfo=datetime.timezone.utc)
        delete_at = wipe_time + datetime.timedelta(hours=1)
        delay = (delete_at - now).total_seconds()
        if delay > 0:
            async def _delete_later(msg: discord.Message, wait: float) -> None:
                try:
                    await asyncio.sleep(wait)
                    await msg.delete()
                except Exception as exc:
                    logging.warning("Failed to auto-delete wipe announcement %s: %s", msg.id, exc)
            asyncio.create_task(_delete_later(message, delay))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤–∞–π–ø–æ–≤
        if hasattr(bot, 'wipe_announcement_count'):
            bot.wipe_announcement_count[user_id] = bot.wipe_announcement_count.get(user_id, 0) + 1
            total_wipes = bot.wipe_announcement_count[user_id]
        else:
            total_wipes = 1

        user_mention = f"<@{user_id}>"
        await send_log_embed(
            guild,
            title="üì£ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –≤–∞–π–ø–µ",
            description=f"–°–æ–∑–¥–∞–Ω–æ {user_mention} –≤ {channel.mention}.\nüî¢ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤–∞–π–ø–æ–≤ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: **{total_wipes}**",
            color=discord.Color.orange(),
            fields=[
                ("–û–±—ä–µ–∫—Ç—ã", str(limits.get("objects", "‚Äî")), True),
                ("–¢—É—Ä–µ–ª–∏", str(limits.get("turrets", "‚Äî")), True),
                ("–ü–í–û", str(limits.get("sam", "‚Äî")), True),
                ("–í—Ä–µ–º—è", discord.utils.format_dt(wipe_time, style="F"), True),
                ("–ò–≥—Ä–æ–∫–∏", str(int(limits.get("players", WIPE_TEAM_SIZE_DEFAULT))), True),
            ],
        )

        return message

    async def schedule_wipe_reminders(
        guild: discord.Guild,
        wipe_time: datetime.datetime,
        limits: dict[str, int],
    ) -> None:
        channel = guild.get_channel(ANNOUNCE_CHANNEL_ID)
        if not isinstance(channel, discord.TextChannel):
            logging.warning("Announcement channel %s not found in guild %s", ANNOUNCE_CHANNEL_ID, guild.id)
            return

        now = discord.utils.utcnow().replace(tzinfo=datetime.timezone.utc)
        offsets = [datetime.timedelta(hours=6), datetime.timedelta(hours=1)]

        async def _sleep_and_remind(delay: float, label: str) -> None:
            try:
                await asyncio.sleep(delay)
            except asyncio.CancelledError:
                return
            embed = discord.Embed(
                title="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∞–π–ø–µ",
                description="–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å, —Å–∫–æ—Ä–æ –≤–∞–π–ø!",
                color=discord.Color.orange(),
                timestamp=discord.utils.utcnow(),
            )
            when_abs = discord.utils.format_dt(wipe_time, style="F")
            when_rel = discord.utils.format_dt(wipe_time, style="R")
            msk_time = (wipe_time + datetime.timedelta(hours=WIPE_TZ_OFFSET_HOURS)).strftime("%H:%M")
            embed.add_field(name="–í—Ä–µ–º—è –≤–∞–π–ø–∞", value=f"{when_abs} ({when_rel})\n–ú–°–ö: {msk_time}", inline=False)
            embed.add_field(name="–û–±—ä–µ–∫—Ç—ã", value=str(limits.get("objects", "‚Äî")), inline=True)
            embed.add_field(name="–¢—É—Ä–µ–ª–∏", value=str(limits.get("turrets", "‚Äî")), inline=True)
            embed.add_field(name="–ü–í–û", value=str(limits.get("sam", "‚Äî")), inline=True)
            players_emoji = _emoji_or_text(guild, "players", ":players:")
            team_size = int(limits.get("players", WIPE_TEAM_SIZE_DEFAULT))
            embed.add_field(name=f"{players_emoji} –ò–≥—Ä–æ–∫–∏", value=str(team_size), inline=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ª–∏–º–∏—Ç–æ–≤ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            limits_description = "**–õ–∏–º–∏—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤:**\n"
            limits_description += f"‚Ä¢ –û–±—ä–µ–∫—Ç—ã: {limits.get('objects', '‚Äî')}\n"
            limits_description += f"‚Ä¢ –¢—É—Ä–µ–ª–∏: {limits.get('turrets', '‚Äî')}\n"
            limits_description += f"‚Ä¢ –ü–í–û: {limits.get('sam', '‚Äî')}\n"
            limits_description += f"‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ: {team_size}\n\n"
            limits_description += "**–í–∞–∂–Ω–æ:**\n"
            limits_description += "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ª–∏–º–∏—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ\n"
            limits_description += "‚Ä¢ –ù–µ –ø—Ä–µ–≤—ã—à–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–µ–ª–µ–π –∏ –ü–í–û\n"
            limits_description += "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤"
            
            embed.add_field(name="üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã", value=limits_description, inline=False)
            msg = await channel.send(content="@everyone", embed=embed)
            # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–π–ø–∞
            delete_at = wipe_time + datetime.timedelta(hours=1)
            delay_del = (delete_at - discord.utils.utcnow().replace(tzinfo=datetime.timezone.utc)).total_seconds()
            if delay_del > 0:
                async def _delete_reminder_later(m: discord.Message, wait: float) -> None:
                    try:
                        await asyncio.sleep(wait)
                        await m.delete()
                    except Exception as exc:
                        logging.warning("Failed to auto-delete reminder %s: %s", m.id, exc)
                asyncio.create_task(_delete_reminder_later(msg, delay_del))

        for offset in offsets:
            remind_at = wipe_time - offset
            delay = (remind_at - now).total_seconds()
            if delay > 0:
                asyncio.create_task(_sleep_and_remind(delay, f"–∑–∞ {int(offset.total_seconds()//3600)} —á"))

    class RulesSelect(discord.ui.Select):
        def __init__(self, *, author_id: int) -> None:
            options = [
                discord.SelectOption(
                    label=data["label"],
                    value=data["value"],
                    description=data["description"],
                )
                for data in RULE_CATEGORIES
            ]
            super().__init__(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∞–≤–∏–ª",
                min_values=1,
                max_values=1,
                options=options,
                custom_id="rules_select",
            )
            self.author_id = author_id
            self.category_map = {data["value"]: data for data in RULE_CATEGORIES}

        async def callback(self, interaction: discord.Interaction) -> None:
            if interaction.user.id != self.author_id and not interaction.user.guild_permissions.manage_messages:
                await interaction.response.send_message(
                    "–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é.",
                    ephemeral=True,
                )
                return

            selected = self.category_map.get(self.values[0])
            if selected is None:
                await interaction.response.send_message("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
                return

            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            user_id = interaction.user.id
            category = selected["value"]
            
            if user_id not in bot.rules_usage_stats:
                bot.rules_usage_stats[user_id] = {}
            
            if category not in bot.rules_usage_stats[user_id]:
                bot.rules_usage_stats[user_id][category] = 0
            
            bot.rules_usage_stats[user_id][category] += 1

            embed = discord.Embed(
                title=selected["title"],
                description=selected["body"],
                color=discord.Color.orange(),
                timestamp=discord.utils.utcnow(),
            )

            await interaction.response.send_message(
                content=None,
                embed=embed,
                ephemeral=True,
            )

    class RulesView(discord.ui.View):
        def __init__(self, *, author_id: int, timeout: float | None = 300) -> None:
            super().__init__(timeout=timeout)
            self.author_id = author_id
            self.add_item(RulesSelect(author_id=author_id))

    class TournamentRoleRequestModal(discord.ui.Modal, title="–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –∑–∞ —Ç—É—Ä–Ω–∏—Ä"):
        def __init__(self) -> None:
            super().__init__()
            self.role_name = discord.ui.TextInput(
                label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ —Ç—É—Ä–Ω–∏—Ä–∞",
                style=discord.TextStyle.short,
                required=True,
                max_length=100
            )
            self.role_color = discord.ui.TextInput(
                label="–¶–≤–µ—Ç —Ä–æ–ª–∏ (HEX)",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: #FF5733 –∏–ª–∏ FF5733",
                style=discord.TextStyle.short,
                required=True,
                max_length=7
            )
            self.team_members = discord.ui.TextInput(
                label="–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã",
                placeholder="@user1 @user2 –∏–ª–∏ –Ω–∏–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
                style=discord.TextStyle.paragraph,
                required=True,
                max_length=1000
            )
            self.tournament_info = discord.ui.TextInput(
                label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ",
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞, –¥–∞—Ç–∞, –º–µ—Å—Ç–æ",
                style=discord.TextStyle.paragraph,
                required=True,
                max_length=500
            )
            self.add_item(self.role_name)
            self.add_item(self.role_color)
            self.add_item(self.team_members)
            self.add_item(self.tournament_info)

        async def on_submit(self, interaction: discord.Interaction) -> None:
            if interaction.guild is None:
                await interaction.response.send_message("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
                return

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–≤–µ—Ç–∞
            color_clean = self.role_color.value.strip().lstrip("#")
            if not re.fullmatch(r"[0-9a-fA-F]{6}", color_clean):
                await interaction.response.send_message(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç #RRGGBB (–Ω–∞–ø—Ä–∏–º–µ—Ä: #FF5733)",
                    ephemeral=True
                )
                return

            await interaction.response.send_message(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –∑–∞ —Ç—É—Ä–Ω–∏—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
                ephemeral=True
            )

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–∫–∏
            try:
                guild = interaction.guild
                if guild:
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
                    overwrites = {
                        guild.default_role: discord.PermissionOverwrite(read_messages=False),
                        interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
                        guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –∫–∞–Ω–∞–ª
                    for member in guild.members:
                        if member.guild_permissions.administrator:
                            overwrites[member] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
                    
                    channel = await guild.create_text_channel(
                        name=f"role-request-{interaction.user.display_name}",
                        overwrites=overwrites,
                        reason=f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –∑–∞ —Ç—É—Ä–Ω–∏—Ä –æ—Ç {interaction.user}"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
                    color_value = int(color_clean, 16)
                    embed = discord.Embed(
                        title="üèÜ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –∑–∞ —Ç—É—Ä–Ω–∏—Ä",
                        description=f"–ó–∞—è–≤–∫–∞ –æ—Ç {interaction.user.mention}",
                        color=discord.Color(color_value),
                        timestamp=discord.utils.utcnow()
                    )
                    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="‚è≥ **–û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è**", inline=False)
                    embed.add_field(name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏", value=self.role_name.value, inline=True)
                    embed.add_field(name="–¶–≤–µ—Ç —Ä–æ–ª–∏", value=f"#{color_clean}", inline=True)
                    embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã (—É–∫–∞–∑–∞–Ω–Ω—ã–µ)", value=self.team_members.value, inline=False)
                    embed.add_field(name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ", value=self.tournament_info.value, inline=False)
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é —Ü–≤–µ—Ç–∞
                    embed.set_footer(text=f"–¶–≤–µ—Ç —Ä–æ–ª–∏: #{color_clean}")
                    
                    await channel.send(
                        embed=embed,
                        view=TournamentRoleApprovalView(
                            applicant_id=interaction.user.id,
                            role_name=self.role_name.value,
                            role_color=color_clean,
                            channel_id=channel.id,
                            tournament_info=self.tournament_info.value
                        )
                    )
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –æ—Ç–º–µ—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–∏–∫–æ–≤
                    member_mentions = []
                    members_text = self.team_members.value
                    
                    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ @username –∏–ª–∏ <@ID>
                    mention_ids = re.findall(r"<@!?(\d+)>", members_text)
                    for user_id in mention_ids:
                        try:
                            member = await guild.fetch_member(int(user_id))
                            if member and not member.bot:
                                member_mentions.append(member.mention)
                        except (discord.NotFound, discord.HTTPException):
                            pass
                    
                    # –ò—â–µ–º –ø–æ –Ω–∏–∫–∞–º (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - –∑–∞–ø—è—Ç–∞—è, –ø—Ä–æ–±–µ–ª, –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏)
                    usernames = re.split(r'[,\n\s]+', members_text.replace('@', '').strip())
                    for username in usernames:
                        username = username.strip()
                        if username and not username.isdigit():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ID
                            # –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            found_member = None
                            for member in guild.members:
                                if not member.bot and (
                                    member.name.lower() == username.lower() or
                                    member.display_name.lower() == username.lower() or
                                    (member.global_name and member.global_name.lower() == username.lower())
                                ):
                                    found_member = member
                                    break
                            
                            if found_member and found_member.mention not in member_mentions:
                                member_mentions.append(found_member.mention)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    await channel.send(
                        f"{interaction.user.mention}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
                    )
                    
                    if member_mentions:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª (–¥–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å)
                        for mention in member_mentions:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                            member_id_match = re.search(r'<@!?(\d+)>', mention)
                            if member_id_match:
                                member_id = int(member_id_match.group(1))
                                member = guild.get_member(member_id)
                                if member:
                                    try:
                                        await channel.set_permissions(
                                            member,
                                            read_messages=True,
                                            send_messages=True,
                                            reason="–£—á–∞—Å—Ç–Ω–∏–∫ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"
                                        )
                                    except discord.HTTPException as exc:
                                        logging.warning("Failed to add permissions for member %s: %s", member_id, exc)
                        
                        await channel.send(
                            f"**üéØ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):**\n" + " ".join(member_mentions) +
                            f"\n\n*–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª –∏ –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ.*\n"
                            f"*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ—Ç–º–µ—Ç–∏–≤ –∏—Ö –∑–¥–µ—Å—å.*"
                        )
                    else:
                        await channel.send(
                            f"**‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.**\n"
                            f"**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è:** –û—Ç–º–µ—Ç—å—Ç–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, "
                            f"—á—Ç–æ–±—ã –∏–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å. –ù–∞–ø—Ä–∏–º–µ—Ä: @user1 @user2 @user3"
                        )
                    
            except discord.Forbidden:
                logging.warning("Missing permissions to create channel for tournament role request")
            except discord.HTTPException as exc:
                logging.error("Failed to create channel for tournament role request: %s", exc)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
            await send_log_embed(
                interaction.guild,
                title="üèÜ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –∑–∞ —Ç—É—Ä–Ω–∏—Ä",
                description=f"{interaction.user.mention} –ø–æ–¥–∞–ª(–∞) –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –∑–∞ —Ç—É—Ä–Ω–∏—Ä",
                color=discord.Color(color_value),
                fields=[
                    ("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏", self.role_name.value, True),
                    ("–¶–≤–µ—Ç —Ä–æ–ª–∏", f"#{color_clean}", True),
                    ("–£—á–∞—Å—Ç–Ω–∏–∫–∏ (—É–∫–∞–∑–∞–Ω–Ω—ã–µ)", self.team_members.value, False),
                    ("–¢—É—Ä–Ω–∏—Ä", self.tournament_info.value, False),
                    ("–°—Ç–∞—Ç—É—Å", "–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π", True),
                ],
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            if bot.db and 'channel' in locals():
                await bot.db.log_event(
                    guild_id=interaction.guild.id,
                    event_type="ticket_created",
                    event_data={
                        "ticket_type": "tournament_role",
                        "channel_id": channel.id,
                        "applicant_id": interaction.user.id
                    }
                )

    class TournamentRoleApprovalView(discord.ui.View):
        def __init__(
            self,
            applicant_id: int,
            role_name: str,
            role_color: str,
            channel_id: int,
            tournament_info: str
        ) -> None:
            super().__init__(timeout=None)
            self.applicant_id = applicant_id
            self.role_name = role_name
            self.role_color = role_color
            self.channel_id = channel_id
            self.tournament_info = tournament_info

        @discord.ui.button(
            label="–û–¥–æ–±—Ä–∏—Ç—å",
            style=discord.ButtonStyle.success,
            emoji="‚úÖ",
            custom_id="approve_tournament_role"
        )
        async def approve_button(self, interaction: discord.Interaction, button: discord.ui.Button) -> None:
            if not interaction.user.guild_permissions.administrator:
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    ephemeral=True
                )
                return

            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∂–∞–ª–∏ –¥–≤–∞–∂–¥—ã
            button.disabled = True
            self.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º view
            try:
                await interaction.message.edit(view=self)
            except discord.HTTPException:
                pass

            await interaction.response.defer(ephemeral=True)

            try:
                guild = interaction.guild
                if not guild:
                    await interaction.followup.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
                    return

                # –°–æ–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
                channel = interaction.channel
                member_ids = set()
                
                if isinstance(channel, discord.TextChannel):
                    async for message in channel.history(limit=50):
                        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                        for mention in message.mentions:
                            if not mention.bot:
                                member_ids.add(mention.id)
                        # –¢–∞–∫–∂–µ –∏—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
                        mention_pattern = re.findall(r"<@!?(\d+)>", message.content)
                        for match in mention_pattern:
                            member_ids.add(int(match))

                if not member_ids:
                    await interaction.followup.send(
                        "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ! "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ—Ç—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ, "
                        "–∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–û–¥–æ–±—Ä–∏—Ç—å' —Å–Ω–æ–≤–∞.",
                        ephemeral=True
                    )
                    return

                # –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å
                color_value = int(self.role_color, 16)
                role = await guild.create_role(
                    name=self.role_name,
                    colour=discord.Color(color_value),
                    mentionable=False,
                    hoist=True,
                    reason=f"–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ä–æ–ª—å. –û–¥–æ–±—Ä–∏–ª: {interaction.user}"
                )
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Discord
                await asyncio.sleep(0.5)

                # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ä–æ–ª—å
                reference_role = guild.get_role(ROLE_POSITION_REFERENCE_ID)
                if reference_role:
                    try:
                        await role.edit(position=reference_role.position + 1)
                        await asyncio.sleep(0.3)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
                    except (discord.Forbidden, discord.HTTPException) as exc:
                        logging.warning("Failed to reposition tournament role: %s", exc)

                # –í—ã–¥–∞–µ–º —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                assigned_members = []
                failed_members = []
                
                for member_id in member_ids:
                    member = guild.get_member(member_id)
                    if member:
                        try:
                            await member.add_roles(role, reason=f"–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ä–æ–ª—å. –û–¥–æ–±—Ä–∏–ª: {interaction.user}")
                            assigned_members.append(member.mention)
                        except (discord.Forbidden, discord.HTTPException) as exc:
                            logging.error("Failed to assign tournament role to %s: %s", member_id, exc)
                            failed_members.append(f"<@{member_id}>")
                    else:
                        failed_members.append(f"<@{member_id}> (–Ω–µ –Ω–∞–π–¥–µ–Ω)")

                # –û–±–Ω–æ–≤–ª—è–µ–º embed
                embed = interaction.message.embeds[0].copy()
                embed.color = discord.Color.green()
                embed.set_field_at(0, name="–°—Ç–∞—Ç—É—Å", value=f"‚úÖ **–û–¥–æ–±—Ä–µ–Ω–æ** {interaction.user.mention}", inline=False)
                embed.add_field(
                    name="–†–µ–∑—É–ª—å—Ç–∞—Ç",
                    value=f"–†–æ–ª—å {role.mention} —Å–æ–∑–¥–∞–Ω–∞ –∏ –≤—ã–¥–∞–Ω–∞ {len(assigned_members)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.",
                    inline=False
                )
                if failed_members:
                    embed.add_field(
                        name="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å",
                        value=", ".join(failed_members),
                        inline=False
                    )
                
                await interaction.message.edit(embed=embed, view=None)
                
                # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                try:
                    await interaction.channel.edit(name=f"‚úÖ-{interaction.channel.name}")
                except (discord.Forbidden, discord.HTTPException) as exc:
                    logging.warning("Failed to rename channel: %s", exc)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞—è–≤–∏—Ç–µ–ª—è
                applicant = guild.get_member(self.applicant_id)
                if applicant:
                    try:
                        await applicant.send(
                            f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ **{self.role_name}** –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
                            f"–†–æ–ª—å **{self.role_name}** (—Ü–≤–µ—Ç #{self.role_color}) —Å–æ–∑–¥–∞–Ω–∞ –∏ –≤—ã–¥–∞–Ω–∞ {len(assigned_members)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã."
                        )
                    except discord.Forbidden:
                        logging.warning("Cannot send DM to applicant %s", self.applicant_id)

                await interaction.followup.send(
                    f"‚úÖ –†–æ–ª—å {role.mention} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≤—ã–¥–∞–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!",
                    ephemeral=True
                )

                # –õ–æ–≥–∏—Ä—É–µ–º
                await send_log_embed(
                    guild,
                    title="üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ä–æ–ª—å –æ–¥–æ–±—Ä–µ–Ω–∞",
                    description=f"{interaction.user.mention} –æ–¥–æ–±—Ä–∏–ª(–∞) —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ {role.mention}",
                    color=discord.Color.green(),
                    fields=[
                        ("–ó–∞—è–≤–∏—Ç–µ–ª—å", f"<@{self.applicant_id}>", True),
                        ("–†–æ–ª—å", role.mention, True),
                        ("–í—ã–¥–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", str(len(assigned_members)), True),
                        ("–£—á–∞—Å—Ç–Ω–∏–∫–∏", ", ".join(assigned_members) if assigned_members else "‚Äî", False),
                    ],
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                if bot.db and isinstance(channel, discord.TextChannel):
                    await bot.db.log_event(
                        guild_id=guild.id,
                        event_type="tournament_role_created",
                        event_data={
                            "role_name": self.role_name,
                            "role_id": role.id,
                            "members_count": len(assigned_members)
                        }
                    )
                    
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥)
                    await bot.db.schedule_channel_deletion(
                        channel_id=channel.id,
                        guild_id=guild.id,
                        channel_type="tournament_role",
                        delete_after_seconds=3600
                    )

            except discord.Forbidden:
                await interaction.followup.send(
                    "‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–æ–ª–∏ –∏–ª–∏ –≤—ã–¥–∞–≤–∞—Ç—å –∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.",
                    ephemeral=True
                )
            except discord.HTTPException as exc:
                logging.error("Failed to create tournament role: %s", exc)
                await interaction.followup.send(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Discord: {exc}",
                    ephemeral=True
                )

        @discord.ui.button(
            label="–û—Ç–∫–∞–∑–∞—Ç—å",
            style=discord.ButtonStyle.danger,
            emoji="‚ùå",
            custom_id="reject_tournament_role"
        )
        async def reject_button(self, interaction: discord.Interaction, button: discord.ui.Button) -> None:
            if not interaction.user.guild_permissions.administrator:
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    ephemeral=True
                )
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º embed
            embed = interaction.message.embeds[0].copy()
            embed.color = discord.Color.red()
            embed.set_field_at(0, name="–°—Ç–∞—Ç—É—Å", value=f"‚ùå **–û—Ç–∫–∞–∑** {interaction.user.mention}", inline=False)
            
            await interaction.response.edit_message(embed=embed, view=None)
            
            # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            try:
                await interaction.channel.edit(name=f"‚ùå-{interaction.channel.name}")
            except (discord.Forbidden, discord.HTTPException) as exc:
                logging.warning("Failed to rename channel: %s", exc)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞—è–≤–∏—Ç–µ–ª—è
            try:
                guild = interaction.guild
                if guild:
                    applicant = guild.get_member(self.applicant_id)
                    if applicant:
                        await applicant.send(
                            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ **{self.role_name}** –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
                            f"–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω."
                        )
            except discord.Forbidden:
                logging.warning("Cannot send DM to applicant %s", self.applicant_id)

            # –õ–æ–≥–∏—Ä—É–µ–º
            if interaction.guild:
                await send_log_embed(
                    interaction.guild,
                    title="üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ä–æ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                    description=f"{interaction.user.mention} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏",
                    color=discord.Color.red(),
                    fields=[
                        ("–ó–∞—è–≤–∏—Ç–µ–ª—å", f"<@{self.applicant_id}>", True),
                        ("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏", self.role_name, True),
                    ],
                )
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å
                channel = interaction.channel
                if bot.db and isinstance(channel, discord.TextChannel):
                    await bot.db.schedule_channel_deletion(
                        channel_id=channel.id,
                        guild_id=interaction.guild.id,
                        channel_type="tournament_role",
                        delete_after_seconds=3600
                    )

    class TicketSelect(discord.ui.Select):
        def __init__(self) -> None:
            options = [
                discord.SelectOption(
                    label="–ü–æ–º–æ—â—å",
                    value="help",
                    description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –æ–±—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º",
                    emoji="‚ùì"
                ),
                discord.SelectOption(
                    label="–†–æ–ª—å –∑–∞ —Ç—É—Ä–Ω–∏—Ä",
                    value="tournament_role",
                    description="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å –∑–∞ –ø–æ–±–µ–¥—É –≤ —Ç—É—Ä–Ω–∏—Ä–µ",
                    emoji="üèÜ"
                ),
                discord.SelectOption(
                    label="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                    value="moderator",
                    description="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
                    emoji="üõ°Ô∏è"
                ),
                discord.SelectOption(
                    label="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                    value="administrator",
                    description="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    emoji="üëë"
                ),
                discord.SelectOption(
                    label="–†–∞–∑–±–∞–Ω",
                    value="unban",
                    description="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–∑–±–∞–Ω",
                    emoji="üîì"
                ),
            ]
            super().__init__(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏",
                min_values=1,
                max_values=1,
                options=options,
                custom_id="ticket_select",
            )

        async def callback(self, interaction: discord.Interaction) -> None:
            if interaction.guild is None:
                await interaction.response.send_message("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
                return

            ticket_type = self.values[0]
            
            if ticket_type == "help":
                await interaction.response.send_modal(HelpTicketModal())
            elif ticket_type == "tournament_role":
                await interaction.response.send_modal(TournamentRoleRequestModal())
            elif ticket_type == "moderator":
                await interaction.response.send_modal(ModeratorTicketModal())
            elif ticket_type == "administrator":
                await interaction.response.send_modal(AdministratorTicketModal())
            elif ticket_type == "unban":
                await interaction.response.send_modal(UnbanTicketModal())

    class TicketView(discord.ui.View):
        def __init__(self, timeout: float | None = None) -> None:
            super().__init__(timeout=timeout)
            self.add_item(TicketSelect())

    class ApplicationStatusView(discord.ui.View):
        def __init__(self, applicant_id: int, application_type: str) -> None:
            super().__init__(timeout=None)
            self.applicant_id = applicant_id
            self.application_type = application_type

        @discord.ui.button(
            label="–û–¥–æ–±—Ä–µ–Ω–æ",
            style=discord.ButtonStyle.success,
            emoji="‚úÖ",
            custom_id="approve_application"
        )
        async def approve_button(self, interaction: discord.Interaction, button: discord.ui.Button) -> None:
            if not interaction.user.guild_permissions.manage_roles:
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏.",
                    ephemeral=True
                )
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º embed —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            embed = interaction.message.embeds[0].copy()
            embed.color = discord.Color.green()
            embed.set_field_at(0, name="–°—Ç–∞—Ç—É—Å", value="‚úÖ **–û–¥–æ–±—Ä–µ–Ω–æ**", inline=True)
            
            await interaction.response.edit_message(embed=embed, view=None)
            
            # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            try:
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
                current_name = interaction.channel.name
                if current_name.startswith("‚úÖ-") or current_name.startswith("‚ùå-") or current_name.startswith("‚è≥-"):
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —ç–º–æ–¥–∑–∏
                    current_name = current_name.split("-", 1)[1] if "-" in current_name else current_name
                
                new_name = f"‚úÖ-{current_name}"
                await interaction.channel.edit(name=new_name)
            except discord.Forbidden:
                logging.warning("Cannot edit channel name for approved application")
            except discord.HTTPException as exc:
                logging.error("Failed to edit channel name: %s", exc)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞—è–≤–∏—Ç–µ–ª—è
            try:
                applicant = interaction.guild.get_member(self.applicant_id)
                if applicant:
                    await applicant.send(
                        f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {self.application_type} –±—ã–ª–∞ **–æ–¥–æ–±—Ä–µ–Ω–∞**! "
                        f"–û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                    )
            except discord.Forbidden:
                logging.warning("Cannot send DM to applicant %s", self.applicant_id)

        @discord.ui.button(
            label="–û–∂–∏–¥–∞–Ω–∏–µ",
            style=discord.ButtonStyle.secondary,
            emoji="‚è≥",
            custom_id="pending_application"
        )
        async def pending_button(self, interaction: discord.Interaction, button: discord.ui.Button) -> None:
            if not interaction.user.guild_permissions.manage_roles:
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏.",
                    ephemeral=True
                )
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º embed —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            embed = interaction.message.embeds[0].copy()
            embed.color = discord.Color.orange()
            embed.set_field_at(0, name="–°—Ç–∞—Ç—É—Å", value="‚è≥ **–û–∂–∏–¥–∞–Ω–∏–µ**", inline=True)
            
            await interaction.response.edit_message(embed=embed, view=self)
            
            # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            try:
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
                current_name = interaction.channel.name
                if current_name.startswith("‚úÖ-") or current_name.startswith("‚ùå-") or current_name.startswith("‚è≥-"):
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —ç–º–æ–¥–∑–∏
                    current_name = current_name.split("-", 1)[1] if "-" in current_name else current_name
                
                new_name = f"‚è≥-{current_name}"
                await interaction.channel.edit(name=new_name)
            except discord.Forbidden:
                logging.warning("Cannot edit channel name for pending application")
            except discord.HTTPException as exc:
                logging.error("Failed to edit channel name: %s", exc)

        @discord.ui.button(
            label="–û—Ç–∫–∞–∑",
            style=discord.ButtonStyle.danger,
            emoji="‚ùå",
            custom_id="reject_application"
        )
        async def reject_button(self, interaction: discord.Interaction, button: discord.ui.Button) -> None:
            if not interaction.user.guild_permissions.manage_roles:
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏.",
                    ephemeral=True
                )
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º embed —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            embed = interaction.message.embeds[0].copy()
            embed.color = discord.Color.red()
            embed.set_field_at(0, name="–°—Ç–∞—Ç—É—Å", value="‚ùå **–û—Ç–∫–∞–∑**", inline=True)
            
            await interaction.response.edit_message(embed=embed, view=None)
            
            # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            try:
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
                current_name = interaction.channel.name
                if current_name.startswith("‚úÖ-") or current_name.startswith("‚ùå-") or current_name.startswith("‚è≥-"):
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —ç–º–æ–¥–∑–∏
                    current_name = current_name.split("-", 1)[1] if "-" in current_name else current_name
                
                new_name = f"‚ùå-{current_name}"
                await interaction.channel.edit(name=new_name)
            except discord.Forbidden:
                logging.warning("Cannot edit channel name for rejected application")
            except discord.HTTPException as exc:
                logging.error("Failed to edit channel name: %s", exc)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞—è–≤–∏—Ç–µ–ª—è
            try:
                applicant = interaction.guild.get_member(self.applicant_id)
                if applicant:
                    await applicant.send(
                        f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {self.application_type} –±—ã–ª–∞ **–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**. "
                        f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
                    )
            except discord.Forbidden:
                logging.warning("Cannot send DM to applicant %s", self.applicant_id)

    class HelpTicketModal(discord.ui.Modal, title="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–º–æ—â—å"):
        def __init__(self) -> None:
            super().__init__()
            self.problem = discord.ui.TextInput(
                label="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É",
                placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å",
                style=discord.TextStyle.paragraph,
                required=True,
                max_length=2000
            )
            self.add_item(self.problem)

        async def on_submit(self, interaction: discord.Interaction) -> None:
            await interaction.response.send_message(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–º–æ—â—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.",
                ephemeral=True
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–º–æ—â—å
            try:
                guild = interaction.guild
                if guild:
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
                    overwrites = {
                        guild.default_role: discord.PermissionOverwrite(read_messages=False),
                        interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
                        guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
                    }
                    
                    channel = await guild.create_text_channel(
                        name=f"help-request-{interaction.user.display_name}",
                        overwrites=overwrites,
                        reason=f"–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–º–æ—â—å –æ—Ç {interaction.user}"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
                    embed = discord.Embed(
                        title="‚ùì –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–º–æ—â—å",
                        description=f"–ó–∞—è–≤–∫–∞ –æ—Ç {interaction.user.mention}",
                        color=discord.Color.blue(),
                        timestamp=discord.utils.utcnow()
                    )
                    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="‚è≥ **–û–∂–∏–¥–∞–Ω–∏–µ**", inline=True)
                    embed.add_field(name="–ü—Ä–æ–±–ª–µ–º–∞", value=self.problem.value, inline=False)
                    
                    await channel.send(embed=embed, view=ApplicationStatusView(interaction.user.id, "–ø–æ–º–æ—â—å"))
                    await channel.send(f"{interaction.user.mention}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.")
                    
            except discord.Forbidden:
                logging.warning("Missing permissions to create channel for help request")
            except discord.HTTPException as exc:
                logging.error("Failed to create channel for help request: %s", exc)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
            await send_log_embed(
                interaction.guild,
                title="‚ùì –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–º–æ—â—å",
                description=f"{interaction.user.mention} –ø–æ–¥–∞–ª(–∞) –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–º–æ—â—å",
                color=discord.Color.blue(),
                fields=[
                    ("–ü—Ä–æ–±–ª–µ–º–∞", self.problem.value, False),
                ],
            )

    class ModeratorTicketModal(discord.ui.Modal, title="–ó–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"):
        def __init__(self) -> None:
            super().__init__()
            self.steamid = discord.ui.TextInput(
                label="SteamID",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à SteamID",
                style=discord.TextStyle.short,
                required=True,
                max_length=50
            )
            self.age = discord.ui.TextInput(
                label="–í–æ–∑—Ä–∞—Å—Ç",
                placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–º–∏–Ω–∏–º—É–º 14 –ª–µ—Ç)",
                style=discord.TextStyle.short,
                required=True,
                max_length=3
            )
            self.timezone = discord.ui.TextInput(
                label="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                style=discord.TextStyle.short,
                required=True,
                max_length=20
            )
            self.experience = discord.ui.TextInput(
                label="–û–ø—ã—Ç",
                placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –∏ –ø—Ä–∏—á–∏–Ω—ã —É—Ö–æ–¥–∞",
                style=discord.TextStyle.paragraph,
                required=True,
                max_length=1000
            )
            self.goals = discord.ui.TextInput(
                label="–¶–µ–ª—å",
                placeholder="–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º",
                style=discord.TextStyle.paragraph,
                required=True,
                max_length=1000
            )
            self.add_item(self.steamid)
            self.add_item(self.age)
            self.add_item(self.timezone)
            self.add_item(self.experience)
            self.add_item(self.goals)

        async def on_submit(self, interaction: discord.Interaction) -> None:
            try:
                age = int(self.age.value)
                if age < 14:
                    await interaction.response.send_message(
                        "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ - 14 –ª–µ—Ç.",
                        ephemeral=True
                    )
                    return
            except ValueError:
                await interaction.response.send_message(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.",
                    ephemeral=True
                )
                return

            await interaction.response.send_message(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
                ephemeral=True
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            try:
                guild = interaction.guild
                if guild:
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
                    overwrites = {
                        guild.default_role: discord.PermissionOverwrite(read_messages=False),
                        interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
                        guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
                    }
                    
                    channel = await guild.create_text_channel(
                        name=f"mod-application-{interaction.user.display_name}",
                        overwrites=overwrites,
                        reason=f"–ó–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç {interaction.user}"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
                    embed = discord.Embed(
                        title="üõ°Ô∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
                        description=f"–ó–∞—è–≤–∫–∞ –æ—Ç {interaction.user.mention}",
                        color=discord.Color.green(),
                        timestamp=discord.utils.utcnow()
                    )
                    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="‚è≥ **–û–∂–∏–¥–∞–Ω–∏–µ**", inline=True)
                    embed.add_field(name="SteamID", value=self.steamid.value, inline=True)
                    embed.add_field(name="–í–æ–∑—Ä–∞—Å—Ç", value=self.age.value, inline=True)
                    embed.add_field(name="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", value=self.timezone.value, inline=True)
                    embed.add_field(name="–û–ø—ã—Ç", value=self.experience.value, inline=False)
                    embed.add_field(name="–¶–µ–ª—å", value=self.goals.value, inline=False)
                    
                    await channel.send(embed=embed, view=ApplicationStatusView(interaction.user.id, "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"))
                    await channel.send(f"{interaction.user.mention}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.")
                    
            except discord.Forbidden:
                logging.warning("Missing permissions to create channel for moderator application")
            except discord.HTTPException as exc:
                logging.error("Failed to create channel for moderator application: %s", exc)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
            await send_log_embed(
                interaction.guild,
                title="üõ°Ô∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
                description=f"{interaction.user.mention} –ø–æ–¥–∞–ª(–∞) –∑–∞—è–≤–∫—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
                color=discord.Color.green(),
                fields=[
                    ("SteamID", self.steamid.value, True),
                    ("–í–æ–∑—Ä–∞—Å—Ç", self.age.value, True),
                    ("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", self.timezone.value, True),
                    ("–û–ø—ã—Ç", self.experience.value, False),
                    ("–¶–µ–ª—å", self.goals.value, False),
                ],
            )

    class AdministratorTicketModal(discord.ui.Modal, title="–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"):
        def __init__(self) -> None:
            super().__init__()
            self.steamid = discord.ui.TextInput(
                label="SteamID",
                placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à SteamID",
                style=discord.TextStyle.short,
                required=True,
                max_length=50
            )
            self.age = discord.ui.TextInput(
                label="–í–æ–∑—Ä–∞—Å—Ç",
                placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç",
                style=discord.TextStyle.short,
                required=True,
                max_length=3
            )
            self.timezone = discord.ui.TextInput(
                label="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: UTC+3 (–ú–°–ö)",
                style=discord.TextStyle.short,
                required=True,
                max_length=20
            )
            self.experience = discord.ui.TextInput(
                label="–û–ø—ã—Ç",
                placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏",
                style=discord.TextStyle.paragraph,
                required=True,
                max_length=1000
            )
            self.goals = discord.ui.TextInput(
                label="–¶–µ–ª–∏",
                placeholder="–ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤—ã —Å—Ç–∞–≤–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä?",
                style=discord.TextStyle.paragraph,
                required=True,
                max_length=1000
            )
            self.add_item(self.steamid)
            self.add_item(self.age)
            self.add_item(self.timezone)
            self.add_item(self.experience)
            self.add_item(self.goals)

        async def on_submit(self, interaction: discord.Interaction) -> None:
            try:
                age = int(self.age.value)
                if age < 16:
                    await interaction.response.send_message(
                        "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - 16 –ª–µ—Ç.",
                        ephemeral=True
                    )
                    return
            except ValueError:
                await interaction.response.send_message(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.",
                    ephemeral=True
                )
                return

            await interaction.response.send_message(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –ì–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                ephemeral=True
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            try:
                guild = interaction.guild
                if guild:
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
                    overwrites = {
                        guild.default_role: discord.PermissionOverwrite(read_messages=False),
                        interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
                        guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
                    }
                    
                    channel = await guild.create_text_channel(
                        name=f"admin-application-{interaction.user.display_name}",
                        overwrites=overwrites,
                        reason=f"–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç {interaction.user}"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
                    embed = discord.Embed(
                        title="üëë –ó–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        description=f"–ó–∞—è–≤–∫–∞ –æ—Ç {interaction.user.mention}",
                        color=discord.Color.purple(),
                        timestamp=discord.utils.utcnow()
                    )
                    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="‚è≥ **–û–∂–∏–¥–∞–Ω–∏–µ**", inline=True)
                    embed.add_field(name="SteamID", value=self.steamid.value, inline=True)
                    embed.add_field(name="–í–æ–∑—Ä–∞—Å—Ç", value=self.age.value, inline=True)
                    embed.add_field(name="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", value=self.timezone.value, inline=True)
                    embed.add_field(name="–û–ø—ã—Ç", value=self.experience.value, inline=False)
                    embed.add_field(name="–¶–µ–ª–∏", value=self.goals.value, inline=False)
                    
                    await channel.send(embed=embed, view=ApplicationStatusView(interaction.user.id, "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"))
                    await channel.send(f"{interaction.user.mention}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.")
                    
            except discord.Forbidden:
                logging.warning("Missing permissions to create channel for admin application")
            except discord.HTTPException as exc:
                logging.error("Failed to create channel for admin application: %s", exc)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
            await send_log_embed(
                interaction.guild,
                title="üëë –ó–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                description=f"{interaction.user.mention} –ø–æ–¥–∞–ª(–∞) –∑–∞—è–≤–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                color=discord.Color.purple(),
                fields=[
                    ("SteamID", self.steamid.value, True),
                    ("–í–æ–∑—Ä–∞—Å—Ç", self.age.value, True),
                    ("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", self.timezone.value, True),
                    ("–û–ø—ã—Ç", self.experience.value, False),
                    ("–¶–µ–ª–∏", self.goals.value, False),
                ],
            )

    class UnbanTicketModal(discord.ui.Modal, title="–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–±–∞–Ω"):
        def __init__(self) -> None:
            super().__init__()
            self.steamid = discord.ui.TextInput(
                label="SteamID",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à SteamID",
                style=discord.TextStyle.short,
                required=True,
                max_length=50
            )
            self.ban_date = discord.ui.TextInput(
                label="–î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏",
                placeholder="–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏",
                style=discord.TextStyle.short,
                required=True,
                max_length=50
            )
            self.reason = discord.ui.TextInput(
                label="–ü—Ä–∏—á–∏–Ω–∞ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞",
                placeholder="–û–ø–∏—à–∏—Ç–µ, –ø–æ—á–µ–º—É –≤–∞—Å —Å–ª–µ–¥—É–µ—Ç —Ä–∞–∑–±–∞–Ω–∏—Ç—å",
                style=discord.TextStyle.paragraph,
                required=True,
                max_length=2000
            )
            self.add_item(self.steamid)
            self.add_item(self.ban_date)
            self.add_item(self.reason)

        async def on_submit(self, interaction: discord.Interaction) -> None:
            await interaction.response.send_message(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–±–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.",
                ephemeral=True
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–∑–±–∞–Ω
            try:
                guild = interaction.guild
                if guild:
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
                    overwrites = {
                        guild.default_role: discord.PermissionOverwrite(read_messages=False),
                        interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
                        guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
                    }
                    
                    channel = await guild.create_text_channel(
                        name=f"unban-request-{interaction.user.display_name}",
                        overwrites=overwrites,
                        reason=f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–±–∞–Ω –æ—Ç {interaction.user}"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
                    embed = discord.Embed(
                        title="üîì –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–±–∞–Ω",
                        description=f"–ó–∞—è–≤–∫–∞ –æ—Ç {interaction.user.mention}",
                        color=discord.Color.orange(),
                        timestamp=discord.utils.utcnow()
                    )
                    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="‚è≥ **–û–∂–∏–¥–∞–Ω–∏–µ**", inline=True)
                    embed.add_field(name="SteamID", value=self.steamid.value, inline=True)
                    embed.add_field(name="–î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", value=self.ban_date.value, inline=True)
                    embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=self.reason.value, inline=False)
                    
                    await channel.send(embed=embed, view=ApplicationStatusView(interaction.user.id, "—Ä–∞–∑–±–∞–Ω"))
                    await channel.send(f"{interaction.user.mention}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.")
                    
            except discord.Forbidden:
                logging.warning("Missing permissions to create channel for unban request")
            except discord.HTTPException as exc:
                logging.error("Failed to create channel for unban request: %s", exc)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
            await send_log_embed(
                interaction.guild,
                title="üîì –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–±–∞–Ω",
                description=f"{interaction.user.mention} –ø–æ–¥–∞–ª(–∞) –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–∑–±–∞–Ω",
                color=discord.Color.orange(),
                fields=[
                    ("SteamID", self.steamid.value, True),
                    ("–î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", self.ban_date.value, True),
                    ("–ü—Ä–∏—á–∏–Ω–∞", self.reason.value, False),
                ],
            )

    @bot.tree.command(name="check", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –≤—ã–¥–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ä–æ–ª—å –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.")
    @app_commands.guild_only()
    @app_commands.default_permissions(manage_roles=True)
    async def check_command(interaction: discord.Interaction) -> None:
        if interaction.guild is None:
            await interaction.response.send_message("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
            return

        role = interaction.guild.get_role(VERIFICATION_ROLE_ID)
        if role is None:
            await interaction.response.send_message(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ä–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É `VERIFICATION_ROLE_ID`.",
                ephemeral=True,
            )
            return

        await interaction.response.defer(ephemeral=True, thinking=True)

        missing_members = [
            member
            for member in interaction.guild.members
            if not member.bot and role not in member.roles
        ]

        successes = 0
        failures: list[str] = []

        for member in missing_members:
            try:
                await member.add_roles(role, reason="–í—ã–¥–∞—á–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ /check.")
            except discord.Forbidden:
                failures.append(member.mention)
            except discord.HTTPException as exc:
                logging.error("Failed to add start role to %s: %s", member.id, exc)
                failures.append(member.mention)
            else:
                successes += 1
                await asyncio.sleep(0.2)

        await interaction.followup.send(
            content=(
                f"–ì–æ—Ç–æ–≤–æ. –í—ã–¥–∞–Ω–æ —Ä–æ–ª–µ–π: {successes}."
                + (f" –ù–µ —É–¥–∞–ª–æ—Å—å: {', '.join(failures)}." if failures else "")
            ),
            ephemeral=True,
        )

        if successes or failures:
            await send_log_embed(
                interaction.guild,
                title="üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ä–æ–ª–∏",
                description=f"{interaction.user.mention} –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) `/check`.",
                color=discord.Color.teal(),
                fields=[
                    ("–†–æ–ª—å", role.mention, True),
                    ("–í—ã–¥–∞–Ω–æ", str(successes), True),
                    ("–ù–µ —É–¥–∞–ª–æ—Å—å", ", ".join(failures) if failures else "‚Äî", False),
                ],
            )

    @bot.tree.command(name="clear", description="–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
    @app_commands.guild_only()
    async def clear_command(interaction: discord.Interaction) -> None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ defer (—á—Ç–æ–±—ã –Ω–µ –∏—Å—Ç–µ–∫ interaction)
        if interaction.user.id != CONTENT_GUARD_EXEMPT_USER_ID:
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.",
                ephemeral=True,
            )
            return

        channel = interaction.channel
        if not isinstance(channel, discord.TextChannel):
            await interaction.response.send_message(
                "–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö.",
                ephemeral=True,
            )
            return

        # –î–µ–ª–∞–µ–º defer —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        try:
            await interaction.response.defer(ephemeral=True, thinking=True)
        except discord.errors.NotFound:
            # Interaction –∏—Å—Ç–µ–∫, –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
            logging.warning("Interaction expired for clear command from user %s", interaction.user.id)
            return

        total_deleted = 0

        while True:
            try:
                deleted = await channel.purge(limit=100, bulk=True)
            except discord.Forbidden:
                await interaction.followup.send(
                    "–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.",
                    ephemeral=True,
                )
                return
            except discord.HTTPException as exc:
                logging.error("Failed to purge messages in %s: %s", channel.id, exc)
                await interaction.followup.send(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Discord.",
                    ephemeral=True,
                )
                return

            batch_count = len(deleted)
            total_deleted += batch_count

            if batch_count < 100:
                break

            await asyncio.sleep(1)

        await interaction.followup.send(
            f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_deleted}.",
            ephemeral=True,
        )

        await send_log_embed(
            interaction.guild,
            title="üßπ –û—á–∏—Å—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞",
            description=f"{interaction.user.mention} –æ—á–∏—Å—Ç–∏–ª(–∞) –∫–∞–Ω–∞–ª {channel.mention}.",
            color=discord.Color.blue(),
            fields=[
                ("–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π", str(total_deleted), True),
            ],
        )

    @bot.tree.command(name="assignrole", description="–°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –∏ –≤—ã–¥–∞—Ç—å –µ—ë —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.")
    @app_commands.guild_only()
    @app_commands.default_permissions(manage_roles=True)
    @app_commands.describe(
        members="–ü–µ—Ä–µ—á–∏—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
        role_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏.",
        color_hex="–¶–≤–µ—Ç —Ä–æ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #RRGGBB.",
    )
    async def assign_role_command(
        interaction: discord.Interaction,
        members: str,
        role_name: str,
        color_hex: str,
    ) -> None:
        if interaction.guild is None:
            await interaction.response.send_message(
                "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                ephemeral=True,
            )
            return

        await interaction.response.defer(ephemeral=True, thinking=True)

        mention_ids = {int(match) for match in re.findall(r"<@!?(\d+)>", members)}
        if not mention_ids:
            await interaction.followup.send(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –£–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.",
                ephemeral=True,
            )
            return

        color_clean = color_hex.strip().lstrip("#")
        if not re.fullmatch(r"[0-9a-fA-F]{6}", color_clean):
            await interaction.followup.send(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π #RRGGBB.",
                ephemeral=True,
            )
            return

        color_value = int(color_clean, 16)
        color = discord.Color(color_value)

        role = discord.utils.get(interaction.guild.roles, name=role_name)
        created = False
        try:
            if role is None:
                role = await interaction.guild.create_role(
                    name=role_name,
                    colour=color,
                    mentionable=False,
                    hoist=True,
                    reason=f"–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ /assignrole ({interaction.user}).",
                )
                created = True
            else:
                await role.edit(
                    colour=color,
                    hoist=True,
                    mentionable=False,
                    reason=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ /assignrole ({interaction.user}).",
                )
        except discord.Forbidden:
            await interaction.followup.send(
                "–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª–∏.",
                ephemeral=True,
            )
            return
        except discord.HTTPException as exc:
            logging.error("Failed to create/edit role %s: %s", role_name, exc)
            await interaction.followup.send(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Discord.",
                ephemeral=True,
            )
            return

        position_note = "‚Äî"
        reference_role = interaction.guild.get_role(ROLE_POSITION_REFERENCE_ID)
        if reference_role is None:
            position_note = f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–æ–ª—å-–æ—Ä–∏–µ–Ω—Ç–∏—Ä —Å ID {ROLE_POSITION_REFERENCE_ID}."
        else:
            desired_position = reference_role.position + 1
            if role.position <= reference_role.position:
                try:
                    await role.edit(
                        position=desired_position,
                        reason=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ /assignrole ({interaction.user}).",
                    )
                except discord.Forbidden:
                    position_note = (
                        f"–ù–µ—Ç –ø—Ä–∞–≤ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ä–æ–ª—å –≤—ã—à–µ {reference_role.mention}."
                    )
                except discord.HTTPException as exc:
                    logging.error("Failed to update role position for %s: %s", role.id, exc)
                    position_note = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Ä–æ–ª–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Discord."
                else:
                    position_note = f"–†–æ–ª—å –ø–æ–¥–Ω—è—Ç–∞ –≤—ã—à–µ {reference_role.mention}."
            else:
                position_note = f"–†–æ–ª—å —É–∂–µ –≤—ã—à–µ {reference_role.mention}."

        assigned = 0
        failures: list[str] = []

        for member_id in mention_ids:
            member = interaction.guild.get_member(member_id)
            if member is None:
                failures.append(f"<@{member_id}> (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
                continue
            try:
                await member.add_roles(role, reason=f"–í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ /assignrole ({interaction.user}).")
            except discord.Forbidden:
                failures.append(member.mention)
            except discord.HTTPException as exc:
                logging.error("Failed to assign role %s to %s: %s", role.id, member.id, exc)
                failures.append(member.mention)
            else:
                assigned += 1
                await asyncio.sleep(0.2)

        await interaction.followup.send(
            (
                f"{'–°–æ–∑–¥–∞–Ω–∞' if created else '–û–±–Ω–æ–≤–ª–µ–Ω–∞'} —Ä–æ–ª—å {role.mention}. "
                f"–í—ã–¥–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º: {assigned}."
                + (f" –ù–µ —É–¥–∞–ª–æ—Å—å: {', '.join(failures)}." if failures else "")
                + f" –ü–æ–∑–∏—Ü–∏—è: {position_note}"
            ),
            ephemeral=True,
        )

        await send_log_embed(
            interaction.guild,
            title="üé® –í—ã–¥–∞—á–∞ –Ω–æ–≤–æ–π —Ä–æ–ª–∏",
            description=f"{interaction.user.mention} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞) `/assignrole`.",
            color=color,
            fields=[
                ("–†–æ–ª—å", role.mention, True),
                ("–°–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ", "–î–∞" if created else "–ù–µ—Ç", True),
                ("–í—ã–¥–∞–Ω–æ", str(assigned), True),
                ("–ù–µ —É–¥–∞–ª–æ—Å—å", ", ".join(failures) if failures else "‚Äî", False),
                ("–ü–æ–∑–∏—Ü–∏—è", position_note, False),
            ],
        )

    @bot.tree.command(name="rules", description="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø—Ä–∞–≤–∏–ª –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")
    @app_commands.guild_only()
    async def rules_command(interaction: discord.Interaction) -> None:
        await interaction.response.send_message(
            content="**–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞**\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∞–≤–∏–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            view=RulesView(author_id=interaction.user.id),
            ephemeral=False,
        )

    @bot.tree.command(name="setup_tickets", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ç–∏–∫–µ—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ.")
    @app_commands.guild_only()
    @app_commands.default_permissions(manage_messages=True)
    async def setup_tickets_command(interaction: discord.Interaction) -> None:
        if interaction.guild is None:
            await interaction.response.send_message("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
            return

        try:
            await interaction.response.defer(ephemeral=True, thinking=True)
        except discord.errors.NotFound:
            # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ (–≤—ã–∑–≤–∞–Ω–æ –¥–≤–∞–∂–¥—ã –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –∂–¥–∞–ª–∏)
            logging.warning("Interaction expired for setup_tickets from user %s", interaction.user.id)
            return

        channel = interaction.guild.get_channel(TICKET_SYSTEM_CHANNEL_ID)
        if not isinstance(channel, discord.TextChannel):
            await interaction.followup.send(
                f"–ö–∞–Ω–∞–ª —Å ID {TICKET_SYSTEM_CHANNEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                ephemeral=True
            )
            return

        # –°–æ–∑–¥–∞–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ —Ç–∏–∫–µ—Ç–æ–≤
        embed = discord.Embed(
            title="üé´ –°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤",
            description="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫!",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )

        embed.add_field(
            name="‚ùì –ü–æ–º–æ—â—å",
            value="‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –æ–±—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º\n‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
            inline=False
        )

        embed.add_field(
            name="üèÜ –†–æ–ª—å –∑–∞ —Ç—É—Ä–Ω–∏—Ä",
            value="‚Ä¢ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –∑–∞ –ø–æ–±–µ–¥—É –≤ —Ç—É—Ä–Ω–∏—Ä–µ\n‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–≤–µ—Ç —Ä–æ–ª–∏ (HEX) –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ—Ç–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ –∑–∞—è–≤–∫–∏\n‚Ä¢ –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ä–æ–ª—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
            inline=False
        )

        embed.add_field(
            name="üõ°Ô∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
            value="‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: 14 –ª–µ—Ç\n‚Ä¢ –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π",
            inline=False
        )

        embed.add_field(
            name="üëë –ó–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            value="‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: 16 –ª–µ—Ç\n‚Ä¢ –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –ì–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            inline=False
        )

        embed.add_field(
            name="üîì –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–±–∞–Ω",
            value="‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å SteamID –∏ –¥–∞—Ç—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞",
            inline=False
        )

        embed.add_field(
            name="‚ö†Ô∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            value="‚Ä¢ –ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ\n‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É\n‚Ä¢ –î–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö —Ä–æ–ª–µ–π: —Ü–≤–µ—Ç –≤ HEX (#FF5733), —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å",
            inline=False
        )

        embed.set_footer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ")

        try:
            # –û—á–∏—â–∞–µ–º –∫–∞–Ω–∞–ª –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in channel.history(limit=100):
                if message.author == bot.user and "üé´ –°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤" in message.content:
                    await message.delete()
                    break

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await channel.send(content="üé´ **–°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤**", embed=embed, view=TicketView())
            await interaction.followup.send(
                f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel.mention}",
                ephemeral=True
            )

        except discord.Forbidden:
            await interaction.followup.send(
                "‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.",
                ephemeral=True
            )
        except discord.HTTPException as exc:
            logging.error("Failed to setup ticket system: %s", exc)
            await interaction.followup.send(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ç–∏–∫–µ—Ç–æ–≤ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Discord.",
                ephemeral=True
            )

    @bot.tree.command(name="rules_stats", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª.")
    @app_commands.guild_only()
    @app_commands.default_permissions(manage_messages=True)
    async def rules_stats_command(interaction: discord.Interaction) -> None:
        if interaction.guild is None:
            await interaction.response.send_message("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
            return

        await interaction.response.defer(ephemeral=True, thinking=True)

        if not bot.rules_usage_stats:
            await interaction.followup.send("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–∞.", ephemeral=True)
            return

        # –°–æ–∑–¥–∞–µ–º embed —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        embed = discord.Embed(
            title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª",
            description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤–∏–ª",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow(),
        )

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_stats = {}
        total_views = 0
        
        for user_id, categories in bot.rules_usage_stats.items():
            for category, count in categories.items():
                if category not in category_stats:
                    category_stats[category] = 0
                category_stats[category] += count
                total_views += count

        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_names = {data["value"]: data["label"] for data in RULE_CATEGORIES}
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        sorted_categories = sorted(category_stats.items(), key=lambda x: x[1], reverse=True)
        
        for category, count in sorted_categories:
            category_name = category_names.get(category, category)
            embed.add_field(
                name=category_name,
                value=f"üëÄ {count} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                inline=True
            )

        embed.add_field(
            name="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value=f"–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: **{total_views}**\n–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{len(bot.rules_usage_stats)}**",
            inline=False
        )

        embed.set_footer(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        await interaction.followup.send(embed=embed, ephemeral=True)

    @bot.command(
        name="wipe",
        help="–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –≤–∞–π–ø–µ: –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ—Å–µ—Ç –∏ –∑–∞–¥–∞—Ç—å –≤—Ä–µ–º—è.",
        brief="–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –≤–∞–π–ø–µ.",
    )
    @commands.has_permissions(manage_messages=True)
    async def wipe_command(ctx: commands.Context) -> None:
        if ctx.guild is None:
            await ctx.send("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            return
        if guild_id and ctx.guild.id != guild_id:
            await ctx.send("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.")
            return

        message = await ctx.send(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç m1‚Äìm5, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ' –∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö:",
            view=WipeView(author_id=ctx.author.id),
        )
        schedule_auto_delete(message)

    @bot.command(
        name="help",
        help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.",
        brief="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å.",
    )
    async def help_command(ctx: commands.Context, *, command_name: str | None = None) -> None:
        def command_description(cmd: commands.Command[Any, Any, Any]) -> str:
            description = cmd.help or cmd.brief or cmd.short_doc or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
            return description.strip()

        if command_name:
            target_name = command_name.strip().lstrip(prefix).lower()
            target_cmd = bot.get_command(target_name)
            if not target_cmd:
                message = await ctx.send(
                    f"–ö–æ–º–∞–Ω–¥–∞ `{command_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.",
                    view=DismissView(author_id=ctx.author.id),
                )
                schedule_auto_delete(message)
                return

            embed = discord.Embed(
                title=f"–ö–æ–º–∞–Ω–¥–∞: {prefix}{target_cmd.qualified_name}",
                description=command_description(target_cmd),
                color=discord.Color.blurple(),
                timestamp=discord.utils.utcnow(),
            )

            signature = f"{prefix}{target_cmd.qualified_name}"
            if target_cmd.signature:
                signature = f"{signature} {target_cmd.signature}"
            embed.add_field(name="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", value=f"```\n{signature}\n```", inline=False)

            if target_cmd.aliases:
                embed.add_field(
                    name="–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã",
                    value=", ".join(f"`{alias}`" for alias in target_cmd.aliases),
                    inline=False,
                )

            if isinstance(target_cmd, commands.Group):
                subcommands = [
                    f"`{prefix}{sub.qualified_name}` ‚Äî {command_description(sub)}"
                    for sub in target_cmd.commands
                ]
                if subcommands:
                    embed.add_field(
                        name="–ü–æ–¥–∫–æ–º–∞–Ω–¥—ã",
                        value="\n".join(subcommands),
                        inline=False,
                    )

            embed.set_footer(text="–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            message = await ctx.send(embed=embed, view=DismissView(author_id=ctx.author.id))
            schedule_auto_delete(message)
            return

        embed = discord.Embed(
            title="–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É",
            description=(
                "–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π `!help <–∫–æ–º–∞–Ω–¥–∞>`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ "
                "–ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ. Slash-–∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é `/`."
            ),
            color=discord.Color.green(),
            timestamp=discord.utils.utcnow(),
        )

        prefix_lines = prefix_command_lines()
        slash_lines = slash_command_lines()

        embed.add_field(
            name="–ü—Ä–µ—Ñ–∏–∫—Å-–∫–æ–º–∞–Ω–¥—ã",
            value="\n".join(prefix_lines) if prefix_lines else "–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            inline=False,
        )

        embed.add_field(
            name="Slash-–∫–æ–º–∞–Ω–¥—ã",
            value="\n".join(slash_lines) if slash_lines else "–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            inline=False,
        )

        embed.set_footer(text="–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        message = await ctx.send(embed=embed, view=DismissView(author_id=ctx.author.id))
        schedule_auto_delete(message)

    class VerificationView(discord.ui.View):
        def __init__(self, *, guild_id: int, role_id: int) -> None:
            super().__init__(timeout=None)
            self.guild_id = guild_id
            self.role_id = role_id

        @discord.ui.button(
            label="–ü—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É",
            style=discord.ButtonStyle.success,
            custom_id="verification_button",
        )
        async def verify_button(
            self,
            interaction: discord.Interaction,
            button: discord.ui.Button,
        ) -> None:
            guild = interaction.client.get_guild(self.guild_id)
            if guild is None:
                await interaction.response.send_message(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                    ephemeral=True,
                )
                return

            member = guild.get_member(interaction.user.id)
            if member is None:
                try:
                    member = await guild.fetch_member(interaction.user.id)
                except discord.HTTPException as exc:
                    logging.error("Could not fetch member %s in guild %s: %s", interaction.user.id, guild.id, exc)
                    await interaction.response.send_message(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
                        ephemeral=True,
                    )
                    return

            role = guild.get_role(self.role_id)
            if role is None:
                logging.error("Verification role %s not found in guild %s", self.role_id, guild.id)
                await interaction.response.send_message(
                    "–†–æ–ª—å –¥–ª—è –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–æ–±—â–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    ephemeral=True,
                )
                return

            if role in member.roles:
                await interaction.response.send_message(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∞ ‚Äî —Ä–æ–ª—å —É —Ç–µ–±—è –µ—Å—Ç—å.",
                    ephemeral=True,
                )
                return

            try:
                await member.add_roles(role, reason="Verification completed via DM button.")
            except discord.Forbidden:
                logging.error("Missing permissions to assign role %s in guild %s", role.id, guild.id)
                await interaction.response.send_message(
                    "–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –≤—ã–¥–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å. –°–æ–æ–±—â–∏—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.",
                    ephemeral=True,
                )
                return
            except discord.HTTPException as exc:
                logging.error("Failed to assign role %s to %s: %s", role.id, member.id, exc)
                await interaction.response.send_message(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    ephemeral=True,
                )
                return

            await interaction.response.send_message(
                "–ì–æ—Ç–æ–≤–æ! –†–æ–ª—å –≤—ã–¥–∞–Ω–∞, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.",
                ephemeral=True,
            )
            button.disabled = True
            try:
                await interaction.message.edit(view=self)
            except discord.HTTPException as exc:
                logging.warning("Failed to update verification message for %s: %s", member.id, exc)

    @bot.event
    async def on_member_join(member: discord.Member) -> None:
        if guild_id and member.guild.id != guild_id:
            return

        invite_cache = bot.invite_cache.get(member.guild.id, {})
        inviter_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

        try:
            invites = await member.guild.invites()
        except discord.Forbidden:
            logging.warning("Bot lacks permission to fetch invites in guild %s", member.guild.id)
        except discord.HTTPException as exc:
            logging.error("Failed to fetch invites for guild %s: %s", member.guild.id, exc)
        else:
            bot.invite_cache[member.guild.id] = {inv.code: inv.uses or 0 for inv in invites}
            used_invite = None
            for invite in invites:
                uses = invite.uses or 0
                if uses > invite_cache.get(invite.code, 0):
                    used_invite = invite
                    break

            if used_invite:
                inviter = used_invite.inviter
                if inviter:
                    inviter_text = inviter.mention
                    bot.member_inviters[member.id] = inviter.id
                elif used_invite.code:
                    inviter_text = f"–°—Å—ã–ª–∫–∞: {used_invite.code}"
                else:
                    inviter_text = "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ—Ä–µ"
            else:
                if member.guild.vanity_url_code:
                    inviter_text = f"–í–∞–Ω–∏—Ç–∏ —Å—Å—ã–ª–∫–∞: {member.guild.vanity_url_code}"
                else:
                    inviter_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

        dm_sent = await send_dm(
            member,
            content=(
                "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É."
            ),
            view_factory=lambda: VerificationView(
                guild_id=member.guild.id,
                role_id=VERIFICATION_ROLE_ID,
            ),
        )
        if dm_sent:
            logging.info("Sent verification DM to %s (%s)", member.display_name, member.id)
        else:
            logging.warning("Failed to send verification DM to %s (%s)", member.display_name, member.id)

        await publish_member_event(
            guild=member.guild,
            title="‚ú® –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫",
            description=f"{member.mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É!",
            inviter_text=inviter_text,
            member=member,
            color=discord.Color.green(),
        )

    @bot.event
    async def on_member_remove(member: discord.Member) -> None:
        if guild_id and member.guild.id != guild_id:
            return

        inviter_id = bot.member_inviters.pop(member.id, None)
        inviter_text = f"<@{inviter_id}>" if inviter_id else "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

        await publish_member_event(
            guild=member.guild,
            title="üëã –£—á–∞—Å—Ç–Ω–∏–∫ —É—à—ë–ª",
            description=f"{member.mention} –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä.",
            inviter_text=inviter_text,
            member=member,
            color=discord.Color.red(),
        )

    @bot.event
    async def on_invite_create(invite: discord.Invite) -> None:
        if invite.guild is None:
            return
        if guild_id and invite.guild.id != guild_id:
            return

        bot.invite_cache.setdefault(invite.guild.id, {})[invite.code] = invite.uses or 0

        inviter_text = invite.inviter.mention if invite.inviter else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        expires_in = (
            discord.utils.format_dt(invite.expires_at, style="R")
            if invite.expires_at
            else "–ù–µ –∏—Å—Ç–µ–∫–∞–µ—Ç"
        )
        max_uses = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" if invite.max_uses == 0 else str(invite.max_uses or "‚Äî")

        await send_log_embed(
            invite.guild,
            title="üîó –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ",
            description=f"{inviter_text} —Å–æ–∑–¥–∞–ª(–∞) –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.",
            color=discord.Color.blurple(),
            fields=[
                ("–ö–æ–¥", invite.code or "–í–∞–Ω–∏—Ç–∏", True),
                ("–ö–∞–Ω–∞–ª", invite.channel.mention if invite.channel else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", True),
                ("–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è", expires_in, True),
                ("–ú–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π", max_uses, True),
            ],
        )

    @bot.event
    async def on_message(message: discord.Message) -> None:
        if message.guild is None:
            await bot.process_commands(message)
            return
        if guild_id and message.guild.id != guild_id:
            await bot.process_commands(message)
            return
        if message.author.bot:
            await bot.process_commands(message)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª –∫–∞–Ω–∞–ª–æ–º –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–ª—å (role-request-*)
        if isinstance(message.channel, discord.TextChannel) and message.channel.name.startswith("role-request-"):
            # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–∞–Ω–∞–ª
            if message.mentions:
                for mentioned_member in message.mentions:
                    if not mentioned_member.bot:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∞–≤–∞ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞
                            overwrites = message.channel.overwrites_for(mentioned_member)
                            if overwrites.read_messages != True:
                                await message.channel.set_permissions(
                                    mentioned_member,
                                    read_messages=True,
                                    send_messages=True,
                                    reason=f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É —Ç—É—Ä–Ω–∏—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.author}"
                                )
                                logging.info(
                                    "Added %s to tournament role channel %s",
                                    mentioned_member.id,
                                    message.channel.id
                                )
                        except discord.HTTPException as exc:
                            logging.warning("Failed to add permissions for member %s: %s", mentioned_member.id, exc)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î (—Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è)
            if bot.db and not message.author.bot:
                deletion_info = await bot.db.get_channel_deletion_info(message.channel.id)
                if deletion_info:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä: –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ 1 —á–∞—Å
                    await bot.db.cancel_channel_deletion(message.channel.id)
                    await bot.db.schedule_channel_deletion(
                        channel_id=message.channel.id,
                        guild_id=message.guild.id,
                        channel_type=deletion_info.get("channel_type", "unknown"),
                        delete_after_seconds=3600
                    )
                    logging.debug(f"Reset deletion timer for channel {message.channel.id} due to new message")
        
        if message.author.id == CONTENT_GUARD_EXEMPT_USER_ID:
            await bot.process_commands(message)
            return

        if message_has_restricted_content(message):
            bot.automod_deleted_messages[message.id] = "–ê–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä: —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –º–µ–¥–∏–∞."
            try:
                await message.delete()
            except discord.Forbidden:
                logging.warning("Missing permissions to delete message from %s", message.author.id)
                bot.automod_deleted_messages.pop(message.id, None)
            except discord.HTTPException as exc:
                logging.error("Failed to delete message from %s: %s", message.author.id, exc)
                bot.automod_deleted_messages.pop(message.id, None)
            else:
                attachments = ", ".join(att.filename for att in message.attachments) or "–ù–µ—Ç"
                await send_log_embed(
                    message.guild,
                    title="üö´ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–º",
                    description=f"{message.author.mention} –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.",
                    color=discord.Color.dark_red(),
                    fields=[
                        ("–ö–∞–Ω–∞–ª", message.channel.mention, True),
                        ("–£–¥–∞–ª–∏–ª", f"{bot.user.mention} (—Ñ–∏–ª—å—Ç—Ä)", True),
                        ("–¢–µ–∫—Å—Ç", trim_field(message.content or "‚Äî"), False),
                        ("–í–ª–æ–∂–µ–Ω–∏—è", attachments, True),
                        ("–ü—Ä–∏—á–∏–Ω–∞", "–ê–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä: —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –º–µ–¥–∏–∞.", True),
                    ],
                )

        await bot.process_commands(message)

    @bot.event
    async def on_message_edit(before: discord.Message, after: discord.Message) -> None:
        if after.guild is None:
            return
        if guild_id and after.guild.id != guild_id:
            return
        if after.author.bot:
            return

        if (
            after.author.id != CONTENT_GUARD_EXEMPT_USER_ID
            and message_has_restricted_content(after)
        ):
            bot.automod_deleted_messages[after.id] = "–ê–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä: —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –º–µ–¥–∏–∞ (–ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)."
            try:
                await after.delete()
            except discord.Forbidden:
                logging.warning("Missing permissions to delete edited message from %s", after.author.id)
                bot.automod_deleted_messages.pop(after.id, None)
            except discord.HTTPException as exc:
                logging.error("Failed to delete edited message from %s: %s", after.author.id, exc)
                bot.automod_deleted_messages.pop(after.id, None)
            else:
                attachments = ", ".join(att.filename for att in after.attachments) or "–ù–µ—Ç"
                await send_log_embed(
                    after.guild,
                    title="üö´ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–º",
                    description=f"{after.author.mention} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.",
                    color=discord.Color.dark_red(),
                    fields=[
                        ("–ö–∞–Ω–∞–ª", after.channel.mention, True),
                        ("–£–¥–∞–ª–∏–ª", f"{bot.user.mention} (—Ñ–∏–ª—å—Ç—Ä)", True),
                        ("–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç", trim_field(after.content or "‚Äî"), False),
                        ("–í–ª–æ–∂–µ–Ω–∏—è", attachments, True),
                        ("–ü—Ä–∏—á–∏–Ω–∞", "–ê–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä: —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –º–µ–¥–∏–∞.", True),
                    ],
                )
            return

        if before.content == after.content:
            return

        await send_log_embed(
            after.guild,
            title="‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ",
            description=f"{after.author.mention} –∏–∑–º–µ–Ω–∏–ª(–∞) —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            color=discord.Color.orange(),
            fields=[
                ("–ö–∞–Ω–∞–ª", after.channel.mention, True),
                ("–î–æ", trim_field(before.content or "‚Äî"), False),
                ("–ü–æ—Å–ª–µ", trim_field(after.content or "‚Äî"), False),
            ],
        )

    @bot.event
    async def on_message_delete(message: discord.Message) -> None:
        if message.guild is None:
            return
        if guild_id and message.guild.id != guild_id:
            return
        if message.author and message.author.bot and message.author != bot.user:
            return

        reason = bot.automod_deleted_messages.pop(message.id, None)

        if reason:
            return

        deleter_text = None
        if reason:
            deleter_text = f"{bot.user.mention} (–∞–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä)"
        else:
            perms = message.guild.me.guild_permissions if message.guild.me else None
            if perms and perms.view_audit_log:
                try:
                    async for entry in message.guild.audit_logs(
                        limit=5,
                        action=discord.AuditLogAction.message_delete,
                    ):
                        if (
                            entry.target
                            and entry.target.id == (message.author.id if message.author else None)
                            and entry.extra
                            and entry.extra.channel
                            and entry.extra.channel.id == message.channel.id
                            and (discord.utils.utcnow() - entry.created_at).total_seconds() < 10
                        ):
                            deleter_text = entry.user.mention if entry.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            break
                except discord.Forbidden:
                    logging.warning("Missing audit log permission in guild %s", message.guild.id)
                except discord.HTTPException as exc:
                    logging.error("Failed to read audit logs for guild %s: %s", message.guild.id, exc)

        if deleter_text is None:
            deleter_text = "–ê–≤—Ç–æ—Ä –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä (–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)"

        attachments = ", ".join(att.filename for att in message.attachments) if message.attachments else "–ù–µ—Ç"

        await send_log_embed(
            message.guild,
            title="üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
            description=(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.author.mention if message.author else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} —É–¥–∞–ª–µ–Ω–æ."
            ),
            color=discord.Color.red(),
            fields=[
                ("–ö–∞–Ω–∞–ª", message.channel.mention, True),
                ("–£–¥–∞–ª–∏–ª", deleter_text, True),
                ("–¢–µ–∫—Å—Ç", trim_field(message.content or "‚Äî"), False),
                ("–í–ª–æ–∂–µ–Ω–∏—è", attachments, True),
                ("–ü—Ä–∏—á–∏–Ω–∞", reason or "‚Äî", True),
            ],
        )

    @bot.command(name="broadcast")
    @commands.has_permissions(administrator=True)
    async def broadcast(ctx: commands.Context, *, message: str) -> None:
        members = iter_target_members(ctx)
        total = len(members)
        if total == 0:
            await ctx.send("No target members found.")
            return

        await ctx.send(f"Starting DM broadcast to {total} members. This may take a while.")

        # –°–æ–∑–¥–∞—ë–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π embed
        broadcast_embed = discord.Embed(
            title="üì¢ –í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
            description=message,
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow(),
        )
        if ctx.guild and ctx.guild.icon:
            broadcast_embed.set_thumbnail(url=ctx.guild.icon.url)
        broadcast_embed.set_footer(
            text=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π {ctx.guild.name if ctx.guild else '—Å–µ—Ä–≤–µ—Ä–∞'}",
            icon_url=ctx.author.display_avatar.url if ctx.author else None,
        )

        successes = 0
        failures = 0

        for batch in chunk_members(members, size=10):
            send_tasks = [send_dm(member, embed=broadcast_embed) for member in batch]
            results = await asyncio.gather(*send_tasks)
            successes += sum(1 for ok in results if ok)
            failures += sum(1 for ok in results if not ok)
            await asyncio.sleep(2)

        await ctx.send(f"Broadcast finished. Sent to {successes} members, {failures} failed.")

    @broadcast.error
    async def broadcast_error(ctx: commands.Context, error: commands.CommandError) -> None:
        if isinstance(error, commands.CheckFailure):
            await ctx.send("You do not have permission to run this command here.")
        else:
            logging.exception("Broadcast command failed: %s", error)
            await ctx.send("Broadcast failed. Check logs for details.")

    poll_url = os.getenv(
        "DISCORD_POLL_URL",
        "https://discord.com/channels/1338592151293919354/1385741311830786078/1426988707319124141",
    )

    def build_wipe_embed() -> discord.Embed:
        embed = discord.Embed(
            title="üö® –ó–∞–≤—Ç—Ä–∞ –≤–∞–π–ø —Å–µ—Ä–≤–µ—Ä–∞!",
            description=(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–µ–ª–∏—Ç–µ –º–∏–Ω—É—Ç—É –∏ –æ—Ç–º–µ—Ç—å—Ç–µ—Å—å –≤ —Ñ–æ—Ä–º–µ."
                
            ),
            color=discord.Color.orange(),
        )
        embed.add_field(
            name="–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?",
            value="üìù –ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ–º–∞–Ω–¥–µ.",
            inline=False,
        )
        embed.set_footer(text="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ –Ω–∞–º –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è!")
        return embed

    def build_poll_view() -> discord.ui.View:
        view = discord.ui.View()
        view.add_item(
            discord.ui.Button(
                style=discord.ButtonStyle.link,
                label="–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å",
                url=poll_url,
                emoji="üìã",
            )
        )
        return view

    @bot.command(name="broadcast_wipe")
    @commands.has_permissions(administrator=True)
    async def broadcast_wipe(ctx: commands.Context) -> None:
        members = iter_target_members(ctx)
        total = len(members)
        if total == 0:
            await ctx.send("No target members found for wipe notice.")
            return

        await ctx.send(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –≤–∞–π–ø-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {total} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.")

        successes = 0
        failures = 0

        for batch in chunk_members(members, size=10):
            send_tasks = [
                send_dm(
                    member,
                    content="–ü—Ä–∏–≤–µ—Ç! –ó–∞–≤—Ç—Ä–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –≤–∞–π–ø —Å–µ—Ä–≤–µ—Ä–∞, –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.",
                    embed_factory=build_wipe_embed,
                    view_factory=build_poll_view,
                )
                for member in batch
            ]
            results = await asyncio.gather(*send_tasks)
            successes += sum(1 for ok in results if ok)
            failures += sum(1 for ok in results if not ok)
            await asyncio.sleep(2)

        await ctx.send(
            f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {successes} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, "
            f"{failures} –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )

    @bot.tree.command(
        name="stats",
        description="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞ (–≤–∞–π–ø—ã, —Ç–∏–∫–µ—Ç—ã, —Ä–æ–ª–∏)"
    )
    @app_commands.default_permissions(administrator=True)
    async def stats_command(interaction: discord.Interaction, days: int = 30) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        if not interaction.guild:
            await interaction.response.send_message("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
            return
        
        if not bot.db:
            await interaction.response.send_message(
                "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                ephemeral=True
            )
            return
        
        await interaction.response.defer(ephemeral=True, thinking=True)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await bot.db.get_stats_summary(interaction.guild.id, days=days)
            
            wipe_count = stats.get("wipe_created", 0)
            ticket_count = stats.get("ticket_created", 0)
            role_count = stats.get("tournament_role_created", 0)
            channel_deleted_count = stats.get("channel_deleted", 0)
            
            embed = discord.Embed(
                title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                description=f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ **{days} –¥–Ω–µ–π**",
                color=discord.Color.blue(),
                timestamp=discord.utils.utcnow()
            )
            
            embed.add_field(
                name="üîÑ –í–∞–π–ø—ã",
                value=f"–°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: **{wipe_count}**",
                inline=False
            )
            
            embed.add_field(
                name="üé´ –¢–∏–∫–µ—Ç—ã –ø–æ–º–æ—â–∏",
                value=f"–°–æ–∑–¥–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: **{ticket_count}**",
                inline=True
            )
            
            embed.add_field(
                name="üèÜ –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ —Ä–æ–ª–∏",
                value=f"–°–æ–∑–¥–∞–Ω–æ —Ä–æ–ª–µ–π: **{role_count}**",
                inline=True
            )
            
            embed.add_field(
                name="üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã",
                value=f"–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–æ: **{channel_deleted_count}**",
                inline=True
            )
            
            # –û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            total_events = sum(stats.values())
            embed.add_field(
                name="üìà –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π",
                value=f"**{total_events}** –¥–µ–π—Å—Ç–≤–∏–π",
                inline=False
            )
            
            embed.set_footer(text=f"–ó–∞–ø—Ä–æ—Å–∏–ª {interaction.user.display_name}")
            
            await interaction.followup.send(embed=embed, ephemeral=True)
        
        except Exception as exc:
            logging.error(f"Failed to get stats: {exc}")
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {exc}",
                ephemeral=True
            )

    bot.run(token)


if __name__ == "__main__":
    main()
