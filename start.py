#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Discord Bot + Dashboard
–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Windows, Linux –∏ macOS
"""

import os
import sys
import subprocess
import platform
import time
import signal
from pathlib import Path

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
class Colors:
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    CYAN = '\033[0;36m'
    MAGENTA = '\033[0;35m'
    BLUE = '\033[0;34m'
    NC = '\033[0m'  # No Color
    
    @staticmethod
    def disable_on_windows():
        """–û—Ç–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç–∞ –Ω–∞ Windows –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è"""
        if platform.system() == 'Windows':
            try:
                import colorama
                colorama.init()
            except ImportError:
                # –û—Ç–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞ –µ—Å–ª–∏ colorama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                Colors.RED = ''
                Colors.GREEN = ''
                Colors.YELLOW = ''
                Colors.CYAN = ''
                Colors.MAGENTA = ''
                Colors.BLUE = ''
                Colors.NC = ''

Colors.disable_on_windows()

class Launcher:
    def __init__(self):
        self.project_root = Path(__file__).parent.absolute()
        self.is_windows = platform.system() == 'Windows'
        self.venv_path = self.project_root / 'botenv'
        self.dashboard_path = self.project_root / 'dashboard'
        self.processes = []
        
    def print_header(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print(f"{Colors.CYAN}========================================{Colors.NC}")
        print(f"{Colors.CYAN}  Discord Bot + Dashboard Launcher{Colors.NC}")
        print(f"{Colors.CYAN}========================================{Colors.NC}")
        print()
        
    def print_step(self, step, total, message):
        """–í—ã–≤–µ—Å—Ç–∏ —à–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        print(f"{Colors.YELLOW}[{step}/{total}] {message}...{Colors.NC}")
        
    def print_success(self, message):
        """–í—ã–≤–µ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        print(f"{Colors.GREEN}‚úÖ {message}{Colors.NC}")
        
    def print_error(self, message):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        print(f"{Colors.RED}‚ùå {message}{Colors.NC}")
        
    def print_warning(self, message):
        """–í—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        print(f"{Colors.YELLOW}‚ö†Ô∏è  {message}{Colors.NC}")
        
    def print_info(self, message):
        """–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        print(f"{Colors.CYAN}{message}{Colors.NC}")
        
    def check_python(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ Python"""
        self.print_step(1, 5, "–ü—Ä–æ–≤–µ—Ä–∫–∞ Python")
        try:
            version = sys.version.split()[0]
            major, minor = map(int, version.split('.')[:2])
            if major < 3 or (major == 3 and minor < 8):
                self.print_error(f"–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è {version}")
                return False
            self.print_success(f"Python –Ω–∞–π–¥–µ–Ω: {version}")
            return True
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Python: {e}")
            return False
            
    def check_nodejs(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ Node.js"""
        self.print_step(2, 5, "–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js")
        try:
            result = subprocess.run(['node', '--version'], 
                                  capture_output=True, text=True, check=True)
            version = result.stdout.strip()
            self.print_success(f"Node.js –Ω–∞–π–¥–µ–Ω: {version}")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            self.print_error("Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js 16+")
            return False
            
    def setup_python_venv(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ Python"""
        self.print_step(3, 5, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        if not self.venv_path.exists():
            self.print_warning("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞—é...")
            try:
                subprocess.run([sys.executable, '-m', 'venv', str(self.venv_path)], 
                             check=True)
                self.print_success("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
                
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                self.print_info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
                pip_path = self.get_venv_python_path('pip')
                subprocess.run([pip_path, 'install', '-r', 'requirements.txt'], 
                             check=True, cwd=str(self.project_root))
                self.print_success("Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            except subprocess.CalledProcessError as e:
                self.print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
                return False
        else:
            self.print_success("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ")
        return True
        
    def setup_node_modules(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        self.print_step(4, 5, "–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        
        node_modules = self.dashboard_path / 'node_modules'
        if not node_modules.exists():
            self.print_warning("Node modules –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
            try:
                subprocess.run(['npm', 'install'], 
                             check=True, cwd=str(self.dashboard_path))
                self.print_success("Node modules —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            except subprocess.CalledProcessError as e:
                self.print_error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
                return False
        else:
            self.print_success("Node modules –Ω–∞–π–¥–µ–Ω—ã")
        return True
        
    def check_env_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–æ–≤"""
        self.print_step(5, 5, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        env_missing = False
        root_env = self.project_root / '.env'
        dashboard_env = self.dashboard_path / '.env'
        
        if not root_env.exists():
            self.print_warning("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞!")
            env_missing = True
            
        if not dashboard_env.exists():
            self.print_warning("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ dashboard!")
            env_missing = True
            
        if env_missing:
            self.print_warning("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example")
            self.print_warning("–ü—Ä–æ–¥–æ–ª–∂–∞—é –∑–∞–ø—É—Å–∫...")
        else:
            self.print_success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        return True
        
    def get_venv_python_path(self, executable='python'):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
        if self.is_windows:
            scripts_dir = self.venv_path / 'Scripts'
            if executable == 'python':
                return str(scripts_dir / 'python.exe')
            elif executable == 'pip':
                return str(scripts_dir / 'pip.exe')
        else:
            bin_dir = self.venv_path / 'bin'
            return str(bin_dir / executable)
            
    def start_bot(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å Discord –±–æ—Ç–∞"""
        self.print_info("üöÄ –ó–∞–ø—É—Å–∫ Discord Bot...")
        
        python_path = self.get_venv_python_path('python')
        bot_script = self.project_root / 'broadcast_bot.py'
        
        try:
            process = subprocess.Popen(
                [python_path, str(bot_script)],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                cwd=str(self.project_root)
            )
            self.processes.append(('bot', process))
            return process
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return None
            
    def start_dashboard(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å Dashboard"""
        self.print_info("üöÄ –ó–∞–ø—É—Å–∫ Dashboard...")
        
        try:
            process = subprocess.Popen(
                ['node', 'server.js'],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                cwd=str(self.dashboard_path)
            )
            self.processes.append(('dashboard', process))
            return process
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            return None
            
    def monitor_processes(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –≤—ã–≤–æ–¥–∏—Ç—å –ª–æ–≥–∏"""
        print()
        self.print_success("–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        print()
        self.print_info("üìä Dashboard: http://localhost:3000")
        self.print_info("ü§ñ Discord Bot: –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ")
        print()
        self.print_warning("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
        print()
        
        try:
            while True:
                all_dead = True
                
                for name, process in self.processes:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∂–∏–≤ –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                    if process.poll() is None:
                        all_dead = False
                        
                        # –ß—Ç–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤
                        try:
                            line = process.stdout.readline()
                            if line:
                                prefix = f"{Colors.MAGENTA}[BOT]{Colors.NC}" if name == 'bot' else f"{Colors.BLUE}[DASH]{Colors.NC}"
                                print(f"{prefix} {line.rstrip()}")
                        except:
                            pass
                
                if all_dead:
                    self.print_error("–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                    break
                    
                time.sleep(0.01)
                
        except KeyboardInterrupt:
            print()
            self.print_warning("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
            self.cleanup()
            
    def cleanup(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        for name, process in self.processes:
            if process.poll() is None:
                try:
                    process.terminate()
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    process.kill()
                except:
                    pass
        self.print_success("–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    def run(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
        self.print_header()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if not self.check_python():
            return 1
        if not self.check_nodejs():
            return 1
        if not self.setup_python_venv():
            return 1
        if not self.setup_node_modules():
            return 1
        if not self.check_env_files():
            return 1
            
        print()
        print(f"{Colors.CYAN}========================================{Colors.NC}")
        print(f"{Colors.CYAN}  –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...{Colors.NC}")
        print(f"{Colors.CYAN}========================================{Colors.NC}")
        print()
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        bot_process = self.start_bot()
        if not bot_process:
            return 1
            
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        time.sleep(2)
        
        dashboard_process = self.start_dashboard()
        if not dashboard_process:
            self.cleanup()
            return 1
            
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.monitor_processes()
        
        return 0


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    launcher = Launcher()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        print()
        launcher.cleanup()
        sys.exit(0)
        
    signal.signal(signal.SIGINT, signal_handler)
    if hasattr(signal, 'SIGTERM'):
        signal.signal(signal.SIGTERM, signal_handler)
    
    sys.exit(launcher.run())


if __name__ == '__main__':
    main()

